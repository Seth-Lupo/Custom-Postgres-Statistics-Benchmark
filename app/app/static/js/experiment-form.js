/**
 * PostgreSQL Statistics Estimator - Experiment Form JavaScript
 * 
 * This module handles all JavaScript functionality for the experiment 
 * configuration form, including dynamic configuration loading, YAML editing,
 * form validation, and progress tracking.
 * 
 * Dependencies: Bootstrap 5, HTMX
 * 
 * Author: Generated by Assistant
 * Created: 2024
 */

// Global variables for experiment form functionality
let currentLogLevel = 'info';
let logHistory = [];
let streamClosed = false;
let originalYamlConfig = '';
let currentStatsSource = '';

/**
 * Initialize experiment form functionality when DOM is loaded
 */
document.addEventListener('DOMContentLoaded', function() {
    initializeFormValidation();
    initializeConfigurationHandlers();
    checkInitialConfigState();
});

/**
 * Initialize Bootstrap form validation
 */
function initializeFormValidation() {
    const forms = document.querySelectorAll('.needs-validation');
    Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }
            form.classList.add('was-validated');
        }, false);
    });
}

/**
 * Initialize configuration-related event handlers
 */
function initializeConfigurationHandlers() {
    const configSelect = document.getElementById('config_name');
    if (configSelect) {
        configSelect.addEventListener('change', function () {
            if (this.value && currentStatsSource) {
                loadConfigurationYaml(currentStatsSource, this.value);
            }
        });
    }
}

/**
 * Check initial configuration state on page load
 */
function checkInitialConfigState() {
    const editButton = document.getElementById('edit-config-btn');
    const customYaml = document.getElementById('config_yaml');
    
    if (editButton && customYaml && customYaml.value && customYaml.value.trim()) {
        editButton.innerHTML = '<i class="bi bi-pencil-square me-1"></i> Customized';
        editButton.classList.remove('btn-outline-secondary');
        editButton.classList.add('btn-outline-warning');
    }
}

/**
 * Load available configurations for a selected statistics source
 * @param {string} statsSource - The selected statistics source identifier
 */
function loadConfigurations(statsSource) {
    const configSelect = document.getElementById('config_name');
    const editButton = document.getElementById('edit-config-btn');

    if (!statsSource) {
        resetConfigurationControls(configSelect, editButton);
        return;
    }

    currentStatsSource = statsSource;
    showConfigurationLoading(configSelect, editButton);

    // Fetch configurations for the selected stats source
    fetch(`/experiment/configs/${statsSource}`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                handleConfigurationError(configSelect, data.error);
                return;
            }

            if (!data.configs || data.configs.length === 0) {
                showNoConfigurationsAvailable(configSelect);
                return;
            }

            populateConfigurationOptions(configSelect, data.configs);
            enableConfigurationControls(configSelect, editButton);
            loadDefaultConfiguration(configSelect);
        })
        .catch(error => {
            console.error('Error fetching configurations:', error);
            handleConfigurationError(configSelect, 'Error loading configurations');
        });
}

/**
 * Reset configuration controls to initial state
 */
function resetConfigurationControls(configSelect, editButton) {
    configSelect.disabled = true;
    editButton.disabled = true;
    configSelect.innerHTML = '<option value="" disabled selected>Select a statistics source first</option>';
}

/**
 * Show loading state for configuration controls
 */
function showConfigurationLoading(configSelect, editButton) {
    configSelect.disabled = true;
    editButton.disabled = true;
    configSelect.innerHTML = '<option value="" disabled selected>Loading configurations...</option>';
}

/**
 * Handle configuration loading errors
 */
function handleConfigurationError(configSelect, errorMessage) {
    configSelect.innerHTML = '<option value="" disabled selected>Error loading configurations</option>';
    console.error('Configuration loading error:', errorMessage);
}

/**
 * Show message when no configurations are available
 */
function showNoConfigurationsAvailable(configSelect) {
    configSelect.innerHTML = '<option value="" disabled selected>No configurations available</option>';
}

/**
 * Populate configuration select with available options
 */
function populateConfigurationOptions(configSelect, configs) {
    configSelect.innerHTML = '<option value="" disabled selected>Select a configuration</option>';
    
    configs.forEach(([key, description]) => {
        const option = document.createElement('option');
        option.value = key;
        option.textContent = description;
        if (key === 'default') {
            option.selected = true;
        }
        configSelect.appendChild(option);
    });
}

/**
 * Enable configuration controls after successful loading
 */
function enableConfigurationControls(configSelect, editButton) {
    configSelect.disabled = false;
    editButton.disabled = false;
}

/**
 * Load default configuration if available
 */
function loadDefaultConfiguration(configSelect) {
    if (configSelect.value || configSelect.querySelector('option[value="default"]')) {
        const selectedConfig = configSelect.value || 'default';
        loadConfigurationYaml(currentStatsSource, selectedConfig);
    }
}

/**
 * Load YAML configuration content for editing
 * @param {string} statsSource - Statistics source identifier
 * @param {string} configName - Configuration name
 */
function loadConfigurationYaml(statsSource, configName) {
    fetch(`/experiment/configs/${statsSource}/${configName}/yaml`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('Error loading YAML:', data.error);
                return;
            }
            
            originalYamlConfig = data.yaml;
            // Clear any custom YAML since we're loading a predefined config
            document.getElementById('config_yaml').value = '';

            // Reset edit button state
            resetEditButtonState();
        })
        .catch(error => {
            console.error('Error fetching YAML:', error);
        });
}

/**
 * Reset edit button to default state
 */
function resetEditButtonState() {
    const editButton = document.getElementById('edit-config-btn');
    editButton.innerHTML = '<i class="bi bi-pencil-square me-1"></i> Edit';
    editButton.classList.remove('btn-outline-success', 'btn-outline-warning');
    editButton.classList.add('btn-outline-secondary');
}

/**
 * Open the configuration editor modal
 */
function openConfigEditor() {
    const configSelect = document.getElementById('config_name');
    const selectedConfig = configSelect.value;

    if (!selectedConfig || !currentStatsSource) {
        alert('Please select a configuration first.');
        return;
    }

    // Update modal info
    updateModalInfo(selectedConfig);
    
    // Load appropriate YAML content
    loadYamlIntoEditor();
    
    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('configEditorModal'));
    modal.show();
}

/**
 * Update configuration modal information
 */
function updateModalInfo(selectedConfig) {
    document.getElementById('config-source-name').textContent = currentStatsSource;
    document.getElementById('config-original-name').textContent = selectedConfig;
}

/**
 * Load YAML content into the editor
 */
function loadYamlIntoEditor() {
    const customYaml = document.getElementById('config_yaml').value;
    
    if (customYaml && customYaml.trim()) {
        // Load the previously edited YAML
        document.getElementById('yaml-editor').value = customYaml;
        updateConfigStatus('Modified', 'badge bg-warning');
    } else {
        // Load the original YAML
        document.getElementById('yaml-editor').value = originalYamlConfig;
        updateConfigStatus('Unchanged', 'badge bg-secondary');
    }
}

/**
 * Update configuration status display
 */
function updateConfigStatus(statusText, statusClass) {
    const statusElement = document.getElementById('config-status');
    statusElement.textContent = statusText;
    statusElement.className = statusClass;
}

/**
 * Reset configuration to original state
 */
function resetConfiguration() {
    document.getElementById('yaml-editor').value = originalYamlConfig;
    updateConfigStatus('Unchanged', 'badge bg-secondary');

    // Clear the hidden config_yaml field
    document.getElementById('config_yaml').value = '';
    resetEditButtonState();
}

/**
 * Save configuration changes
 */
function saveConfiguration() {
    const yamlContent = document.getElementById('yaml-editor').value.trim();

    if (!yamlContent) {
        alert('Configuration cannot be empty.');
        return;
    }

    // Basic YAML validation
    if (!validateYamlConfiguration(yamlContent)) {
        return;
    }

    // Check if configuration was actually modified
    const isActuallyModified = yamlContent.trim() !== originalYamlConfig.trim();

    // Store the edited YAML
    document.getElementById('config_yaml').value = yamlContent;

    // Update UI based on modification status
    updateConfigurationUI(isActuallyModified);

    // Close the modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('configEditorModal'));
    modal.hide();
}

/**
 * Validate YAML configuration content
 */
function validateYamlConfiguration(yamlContent) {
    try {
        // Basic validation - check for required sections
        if (!yamlContent.includes('name:') || !yamlContent.includes('settings:')) {
            throw new Error('Configuration must include name and settings sections');
        }
        return true;
    } catch (error) {
        alert('Invalid YAML configuration: ' + error.message);
        return false;
    }
}

/**
 * Update configuration UI based on modification status
 */
function updateConfigurationUI(isModified) {
    const editButton = document.getElementById('edit-config-btn');
    
    if (isModified) {
        updateConfigStatus('Modified', 'badge bg-warning');
        editButton.innerHTML = '<i class="bi bi-pencil-square me-1"></i> Customized';
        editButton.classList.remove('btn-outline-secondary');
        editButton.classList.add('btn-outline-warning');
    } else {
        updateConfigStatus('Unchanged', 'badge bg-secondary');
        document.getElementById('config_yaml').value = '';
        resetEditButtonState();
    }
}

/**
 * Set log level filter for progress display
 * @param {string} level - Log level to filter by
 * @param {HTMLElement} button - Button element that was clicked
 */
function setLogLevel(level, button) {
    currentLogLevel = level;

    // Update button states
    button.parentElement.querySelectorAll('button').forEach(btn => {
        btn.classList.remove('active', 'btn-secondary');
        btn.classList.add('btn-outline-secondary');
    });
    button.classList.remove('btn-outline-secondary');
    button.classList.add('active', 'btn-secondary');

    // Filter existing log messages if any
    filterLogMessages();
}

/**
 * Filter log messages based on current log level
 */
function filterLogMessages() {
    // This function can be extended to filter already displayed messages
    // based on the current log level setting
    console.log(`Log level set to: ${currentLogLevel}`);
} 