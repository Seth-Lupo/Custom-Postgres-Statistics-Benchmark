name: default
description: "Schneider AI statistics estimation using OpenAI"

# Provider Configuration - using OpenAI instead of LLM proxy
provider: "openai"
model: "gpt-4o"
temperature: 0.3
session_id: "schneider_stats_session"

# RAG Settings (not used with OpenAI)
rag_usage: false
rag_threshold: 0.5
rag_k: 0

# Estimation Settings
num_iterations: 10
epsilon: 0.1

# PostgreSQL Statistics Configuration
target_columns:
  stanullfrac: 3    # null fraction column index (position 3 in pg_statistic)
  stadistinct: 5    # distinct values column index (position 5 in pg_statistic)
  stanumbers1: 16   # statistical numbers array column index (position 16 in pg_statistic)

# Prompts - Optimized for OpenAI models
system_prompt: "You make predictions about pg_stats tables for postgres databases. You will always make a guess and never guess randomly. You will always output a semicolon, never comma, separated csv with no other information but the csv. Please do not guess NULL for the list columns unless very necessary, please always generate a pg_stats table and never the raw data."

estimation_prompt: |
  I have a postgres sql database that I want you to estimate the pg_stats for. 
  PLEASE MAKE SURE THAT THE CSVS ARE SEMICOLON SEPARATED AND NOT COMMA SEPARATED. 
  The column names and descriptions for pg_stats are: 
  attname name (references pg_attribute.attname): Name of column described by this row, 
  null_frac float4: Fraction of column entries that are null 
  avg_width int4 Average width in bytes of columns entries 
  n_distinct float4 If greater than zero, the estimated number of distinct values in the column. 
  If less than zero, the negative of the number of distinct values divided by the number of rows. 
  (The negated form is used when ANALYZE believes that the number of distinct values is likely to increase as the table grows; 
  the positive form is used when the column seems to have a fixed number of possible values.) 
  For example, -1 indicates a unique column in which the number of distinct values is the same as the number of rows. 
  most_common_vals anyarray A list of the most common values in the column. 
  (Null if no values seem to be more common than any others.) 
  most_common_freqs float4[] A list of the frequencies of the most common values, 
  i.e., number of occurrences of each divided by total number of rows. (Null when most_common_vals is.) 
  histogram_bounds anyarray A list of values that divide the columns values into groups of approximately equal population. 
  The values in most_common_vals, if present, are omitted from this histogram calculation. 
  (This column is null if the column data type does not have a < operator or if the most_common_vals list accounts for the entire population.) 
  correlation float4 Statistical correlation between physical row ordering and logical ordering of the column values. 
  This ranges from -1 to +1. When the value is near -1 or +1, an index scan on the column will be estimated to be cheaper than when it is near zero, 
  due to reduction of random access to the disk. (This column is null if the column data type does not have a < operator.) 
  The column names in the database are {col_names}. The total size of the database is {size}. 
  Please do not use ellipses in your histogram predictions and make guesses whenever possible based on patterns in this style of database, 
  do not guess randomly. This dataset {sample_data}. Record your answer in csv format. 
  DO NOT COPY THIS AND ALWAYS GENERATE PG_STATS.

# Validation Settings
accuracy_threshold: 80.0
max_retries: 3 