"""
PostgreSQL Statistics Estimator - Configuration Routes

This module contains FastAPI routes for managing experiment configurations.
It provides endpoints for retrieving available configurations and their
YAML content for different statistics sources.

Routes:
    GET /experiment/configs/{stats_source} - Get available configurations
    GET /experiment/configs/{stats_source}/{config_name}/yaml - Get config YAML

Author: Generated by Assistant
Created: 2024
"""

from fastapi import APIRouter
from fastapi.responses import JSONResponse

from ..experiment import ExperimentRunner
from ..logging_config import web_logger

# Initialize router
router = APIRouter()

# Global experiment runner instance  
experiment_runner = ExperimentRunner()


@router.get("/experiment/configs/{stats_source}")
def get_configurations(stats_source: str):
    """
    Get available configurations for a specific statistics source.
    
    This endpoint returns a list of all available configuration names
    and their display names for the specified statistics source.
    
    Args:
        stats_source: Statistics source identifier (e.g., 'random', 'default')
        
    Returns:
        JSONResponse containing:
        - configs: List of (config_name, display_name) tuples
        - error: Error message if retrieval fails
        
    Example:
        GET /experiment/configs/random
        Returns: {"configs": [["default", "Default Configuration"], ["fast", "Fast Mode"]]}
    """
    try:
        web_logger.debug(f"Retrieving configurations for stats source: {stats_source}")
        
        # Get available configurations from experiment runner
        configs = experiment_runner.get_available_configs(stats_source)
        
        web_logger.debug(f"Found {len(configs)} configurations for {stats_source}")
        
        return JSONResponse({
            "configs": configs
        })
        
    except Exception as e:
        error_msg = f"Failed to get configurations for {stats_source}: {str(e)}"
        web_logger.error(error_msg)
        
        return JSONResponse({
            "error": error_msg
        }, status_code=500)


@router.get("/experiment/configs/{stats_source}/{config_name}/yaml")
def get_configuration_yaml(stats_source: str, config_name: str):
    """
    Get the raw YAML content for a specific configuration.
    
    This endpoint retrieves the YAML configuration file content for
    a specific statistics source and configuration name combination.
    This is used for displaying configuration content in the UI
    and for configuration editing functionality.
    
    Args:
        stats_source: Statistics source identifier
        config_name: Configuration name within the stats source
        
    Returns:
        JSONResponse containing:
        - yaml: Raw YAML configuration content as string
        - error: Error message if retrieval fails
        
    Example:
        GET /experiment/configs/random/default/yaml
        Returns: {"yaml": "name: Default Random\\nsettings:\\n  min_value: 1\\n..."}
    """
    try:
        web_logger.debug(f"Retrieving YAML for {stats_source}/{config_name}")
        
        # Validate stats source exists
        if stats_source not in experiment_runner.src:
            error_msg = f"Unknown stats source: {stats_source}"
            web_logger.warning(error_msg)
            return JSONResponse({
                "error": error_msg
            }, status_code=404)
        
        # Get the source class and create instance
        source_class = experiment_runner.src[stats_source]
        instance = source_class()
        
        # Get configuration file path
        config_path = instance._get_config_path(f"{config_name}.yaml")
        
        # Check if configuration file exists
        if not config_path.exists():
            error_msg = f"Configuration file not found: {config_name}"
            web_logger.warning(error_msg)
            return JSONResponse({
                "error": error_msg
            }, status_code=404)
        
        # Read YAML content
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                yaml_content = f.read()
        except UnicodeDecodeError:
            # Fallback to default encoding if UTF-8 fails
            with open(config_path, 'r') as f:
                yaml_content = f.read()
        
        web_logger.debug(f"Successfully retrieved YAML content for {stats_source}/{config_name} ({len(yaml_content)} chars)")
        
        return JSONResponse({
            "yaml": yaml_content
        })
        
    except Exception as e:
        error_msg = f"Failed to get YAML for {stats_source}/{config_name}: {str(e)}"
        web_logger.error(error_msg)
        
        return JSONResponse({
            "error": error_msg
        }, status_code=500)


@router.get("/experiment/configs/{stats_source}/validate")
def validate_stats_source(stats_source: str):
    """
    Validate that a statistics source exists and is available.
    
    This endpoint checks if the specified statistics source is valid
    and available for use. It's useful for frontend validation.
    
    Args:
        stats_source: Statistics source identifier to validate
        
    Returns:
        JSONResponse containing:
        - valid: Boolean indicating if stats source is valid
        - name: Display name of the stats source (if valid)
        - error: Error message if validation fails
    """
    try:
        web_logger.debug(f"Validating stats source: {stats_source}")
        
        if stats_source not in experiment_runner.src:
            return JSONResponse({
                "valid": False,
                "error": f"Unknown stats source: {stats_source}"
            })
        
        # Get display name
        source_class = experiment_runner.src[stats_source]
        instance = source_class()
        display_name = instance.name()
        
        web_logger.debug(f"Stats source {stats_source} is valid: {display_name}")
        
        return JSONResponse({
            "valid": True,
            "name": display_name
        })
        
    except Exception as e:
        error_msg = f"Error validating stats source {stats_source}: {str(e)}"
        web_logger.error(error_msg)
        
        return JSONResponse({
            "valid": False,
            "error": error_msg
        })


@router.get("/experiment/configs")
def get_all_stats_sources():
    """
    Get all available statistics sources.
    
    This endpoint returns a complete list of all available statistics
    sources that can be used for experiments.
    
    Returns:
        JSONResponse containing:
        - sources: List of (source_key, display_name) tuples
        - count: Number of available sources
    """
    try:
        web_logger.debug("Retrieving all available stats sources")
        
        sources = experiment_runner.get_available_src()
        
        web_logger.debug(f"Found {len(sources)} available stats sources")
        
        return JSONResponse({
            "sources": sources,
            "count": len(sources)
        })
        
    except Exception as e:
        error_msg = f"Failed to get stats sources: {str(e)}"
        web_logger.error(error_msg)
        
        return JSONResponse({
            "error": error_msg
        }, status_code=500) 