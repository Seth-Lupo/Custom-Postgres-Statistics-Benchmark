"""
PostgreSQL Statistics Estimator - Progress Tracking Service

This module provides functionality for tracking experiment progress and 
managing progress callbacks. It handles logging, timestamping, and 
streaming progress updates to the frontend.

Classes:
    ProgressTracker: Manages experiment progress tracking and callbacks

Author: Generated by Assistant  
Created: 2024
"""

import logging
from datetime import datetime
from typing import Callable, List, Optional


class ProgressTracker:
    """
    Handles progress tracking and callback management for experiments.
    
    This service manages:
    - Progress callbacks to the frontend
    - Experiment log collection
    - Timestamped message formatting
    - Stats source log streaming
    """
    
    def __init__(self):
        """Initialize the progress tracker."""
        self.experiment_logs: List[str] = []
        self.progress_callback: Optional[Callable[[str, int, int], None]] = None
        self.stats_callback: Optional[Callable[[str, str], None]] = None
        
    def set_progress_callback(self, callback: Callable[[str, int, int], None]) -> None:
        """
        Set the progress callback function.
        
        Args:
            callback: Function that takes (message, current, total) parameters
        """
        self.progress_callback = callback
        
    def set_stats_callback(self, callback: Callable[[str, str], None]) -> None:
        """
        Set the stats source logging callback.
        
        Args:
            callback: Function that takes (log_level, message) parameters
        """
        self.stats_callback = callback
        
    def log_and_callback(self, message: str, current: int, total: int) -> None:
        """
        Log a message with timestamp and trigger progress callback.
        
        Args:
            message: Progress message to log
            current: Current progress value
            total: Total progress value
        """
        timestamped_message = f"[{datetime.utcnow().strftime('%H:%M:%S')}] {message}"
        self.experiment_logs.append(timestamped_message)
        
        if self.progress_callback:
            # Pass raw message to callback (it will add its own timestamp if needed)
            self.progress_callback(message, current, total)
            
    def stats_source_stream_callback(self, log_level: str, message: str, current_iter: int, total_iter: int) -> None:
        """
        Handle stats source log streaming to frontend.
        
        Args:
            log_level: Logging level (info, warning, error)
            message: Log message from stats source
            current_iter: Current iteration count
            total_iter: Total iterations
        """
        formatted_msg = f"[Stats] {message}"
        timestamped_message = f"[{datetime.utcnow().strftime('%H:%M:%S')}] {formatted_msg}"
        self.experiment_logs.append(timestamped_message)
        
        # Stream to frontend if callback is available
        if self.progress_callback:
            self.progress_callback(formatted_msg, current_iter, total_iter)
            
    def get_experiment_logs(self) -> List[str]:
        """
        Get all collected experiment logs.
        
        Returns:
            List of timestamped log messages
        """
        return self.experiment_logs.copy()
        
    def get_logs_as_string(self) -> str:
        """
        Get all experiment logs as a single string.
        
        Returns:
            Newline-separated log messages
        """
        return '\n'.join(self.experiment_logs)
        
    def clear_logs(self) -> None:
        """Clear all collected experiment logs."""
        self.experiment_logs.clear()
        
    def count_completed_trials(self) -> int:
        """
        Count the number of completed trials from logs.
        
        Returns:
            Number of completed trials based on log messages
        """
        return len([log for log in self.experiment_logs 
                   if "Trial" in log and "completed" in log])
                   
    def add_timestamped_log(self, message: str) -> None:
        """
        Add a pre-timestamped log message.
        
        Args:
            message: Already timestamped message to add
        """
        self.experiment_logs.append(message) 