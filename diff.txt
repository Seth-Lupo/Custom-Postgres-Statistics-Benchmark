diff --git a/app/app/models.py b/app/app/models.py
index 77656fc..05b4367 100644
--- a/app/app/models.py
+++ b/app/app/models.py
@@ -13,6 +13,11 @@ class Experiment(SQLModel, table=True):
     original_config_yaml: Optional[str] = Field(default=None)  # Original config YAML before modifications
     config_modified: bool = Field(default=False)  # Whether config was modified from original
     config_modified_at: Optional[datetime] = Field(default=None)  # When config was modified
+    settings_name: Optional[str] = Field(default=None, max_length=100)
+    settings_yaml: Optional[str] = Field(default=None)
+    original_settings_yaml: Optional[str] = Field(default=None)  # Original settings YAML before modifications
+    settings_modified: bool = Field(default=False)  # Whether settings were modified from original
+    settings_modified_at: Optional[datetime] = Field(default=None)  # When settings were modified
     query: str
     iterations: int
     stats_reset_strategy: str = Field(default="once", max_length=50)  # "once" or "per_trial"
diff --git a/app/app/routers/background_tasks.py b/app/app/routers/background_tasks.py
index dda067e..da89fb2 100644
--- a/app/app/routers/background_tasks.py
+++ b/app/app/routers/background_tasks.py
@@ -30,8 +30,9 @@ experiment_runner = ExperimentRunner()
 experiment_status = {}
 
 
-def run_experiment_background(experiment_id: int, stats_source: str, config_name: str, 
-                            config_yaml: str, query: str, iterations: int, 
+def run_experiment_background(experiment_id: int, stats_source: str, 
+                            settings_name: str, settings_yaml: str,
+                            config_name: str, config_yaml: str, query: str, iterations: int, 
                             stats_reset_strategy: str, transaction_handling: str, 
                             dump_path: str, name: str) -> None:
     """
@@ -44,6 +45,8 @@ def run_experiment_background(experiment_id: int, stats_source: str, config_name
     Args:
         experiment_id: Unique experiment tracking ID
         stats_source: Statistics source identifier
+        settings_name: Settings name (optional)
+        settings_yaml: Custom YAML settings (optional)
         config_name: Configuration name (optional)
         config_yaml: Custom YAML configuration (optional)
         query: SQL query to execute
@@ -95,6 +98,7 @@ def run_experiment_background(experiment_id: int, stats_source: str, config_name
         # Execute the experiment using the experiment runner
         web_logger.info(f"Running experiment {experiment_id} with parameters:")
         web_logger.info(f"  Stats source: {stats_source}")
+        web_logger.info(f"  Settings: {settings_name or 'default'}")
         web_logger.info(f"  Config: {config_name or 'default'}")
         web_logger.info(f"  Iterations: {iterations}")
         web_logger.info(f"  Strategy: {stats_reset_strategy}")
@@ -103,6 +107,8 @@ def run_experiment_background(experiment_id: int, stats_source: str, config_name
         experiment = experiment_runner.run_experiment(
             session=db,
             stats_source=stats_source,
+            settings_name=settings_name,
+            settings_yaml=settings_yaml,
             config_name=config_name,
             config_yaml=config_yaml,
             query=query,
diff --git a/app/app/routers/experiment_routes.py b/app/app/routers/experiment_routes.py
index 26955a4..877a14e 100644
--- a/app/app/routers/experiment_routes.py
+++ b/app/app/routers/experiment_routes.py
@@ -94,6 +94,8 @@ def submit_experiment(
     background_tasks: BackgroundTasks,
     experiment_name: str = Form(...),
     stats_source: str = Form(...),
+    settings_name: str = Form(None),
+    settings_yaml: str = Form(None),
     config_name: str = Form(None),
     config_yaml: str = Form(None),
     iterations: int = Form(...),
@@ -115,6 +117,8 @@ def submit_experiment(
         background_tasks: FastAPI background tasks manager
         experiment_name: User-provided experiment name
         stats_source: Selected statistics source
+        settings_name: Selected settings name (optional)
+        settings_yaml: Custom YAML settings (optional)
         config_name: Selected configuration name (optional)
         config_yaml: Custom YAML configuration (optional)
         iterations: Number of trial iterations
@@ -129,11 +133,14 @@ def submit_experiment(
     """
     try:
         # Log experiment submission details
+        settings_display = f"settings '{settings_name}'" if settings_name else "default settings"
         config_display = f"config '{config_name}'" if config_name else "default config"
-        web_logger.info(f"Starting experiment '{experiment_name}' with {stats_source} source ({config_display}), {iterations} iterations")
+        web_logger.info(f"Starting experiment '{experiment_name}' with {stats_source} source ({settings_display}, {config_display}), {iterations} iterations")
         web_logger.info(f"Stats reset strategy: {stats_reset_strategy}, Transaction handling: {transaction_handling}")
         web_logger.info(f"Dump: {dump_file}, Query: {query_file}")
         
+        if settings_yaml:
+            web_logger.debug(f"Using custom settings: {settings_yaml[:200]}...")
         if config_yaml:
             web_logger.debug(f"Using custom configuration: {config_yaml[:200]}...")
 
@@ -194,7 +201,8 @@ def submit_experiment(
         # Launch experiment in background
         background_tasks.add_task(
             run_experiment_background, 
-            experiment_id, stats_source, config_name, config_yaml, query, 
+            experiment_id, stats_source, settings_name, settings_yaml,
+            config_name, config_yaml, query, 
             iterations, stats_reset_strategy, transaction_handling, 
             dump_path, experiment_name
         )
diff --git a/app/app/routers/run.py b/app/app/routers/run.py
index 1fb9a59..de8dedb 100644
--- a/app/app/routers/run.py
+++ b/app/app/routers/run.py
@@ -7,7 +7,8 @@ been split into focused modules for better maintainability.
 
 Router Modules:
 - experiment_routes: Main experiment setup and submission
-- configuration_routes: Configuration management
+- configuration_routes: Configuration management (legacy)
+- settings_config_routes: Settings and configuration management (new)
 - streaming_routes: SSE streaming for real-time updates
 - background_tasks: Background experiment execution
 
@@ -19,6 +20,7 @@ from fastapi import APIRouter
 
 from .experiment_routes import router as experiment_router
 from .configuration_routes import router as config_router
+from .settings_config_routes import router as settings_config_router
 from .streaming_routes import router as streaming_router
 
 # Create main router that combines all sub-routers
@@ -26,7 +28,8 @@ router = APIRouter()
 
 # Include all specialized routers
 router.include_router(experiment_router, tags=["experiments"])
-router.include_router(config_router, tags=["configurations"])
+router.include_router(config_router, tags=["configurations"])  # Legacy support
+router.include_router(settings_config_router, tags=["settings-configs"])  # New structure
 router.include_router(streaming_router, tags=["streaming"])
 
 # Export the experiment status for backward compatibility
diff --git a/app/app/routers/settings_config_routes.py b/app/app/routers/settings_config_routes.py
new file mode 100644
index 0000000..ba54f0b
--- /dev/null
+++ b/app/app/routers/settings_config_routes.py
@@ -0,0 +1,252 @@
+"""
+PostgreSQL Statistics Estimator - Settings and Configuration Routes
+
+This module contains FastAPI routes for managing experiment settings and configurations.
+It provides endpoints for retrieving available settings/configs and their
+YAML content separately.
+
+Routes:
+    GET /experiment/settings - Get available settings
+    GET /experiment/settings/{settings_name}/yaml - Get settings YAML
+    GET /experiment/configs/{stats_source} - Get available configurations
+    GET /experiment/configs/{stats_source}/{config_name}/yaml - Get config YAML
+
+Author: Generated by Assistant
+Created: 2024
+"""
+
+from fastapi import APIRouter
+from fastapi.responses import JSONResponse
+
+from ..experiment import ExperimentRunner
+from ..logging_config import web_logger
+
+# Initialize router
+router = APIRouter()
+
+# Global experiment runner instance  
+experiment_runner = ExperimentRunner()
+
+
+@router.get("/experiment/settings")
+def get_settings():
+    """
+    Get available settings for runtime configuration.
+    
+    This endpoint returns a list of all available settings names
+    and their display names.
+    
+    Returns:
+        JSONResponse containing:
+        - settings: List of (settings_name, display_name) tuples
+        - error: Error message if retrieval fails
+        
+    Example:
+        GET /experiment/settings
+        Returns: {"settings": [["default", "Default Settings"], ["fast", "Fast Settings"]]}
+    """
+    try:
+        web_logger.debug("Retrieving available settings")
+        
+        # Get any stats source instance to access settings
+        if not experiment_runner.src:
+            error_msg = "No stats sources available"
+            web_logger.warning(error_msg)
+            return JSONResponse({
+                "error": error_msg
+            }, status_code=404)
+        
+        # Use the first available stats source to get settings
+        source_class = next(iter(experiment_runner.src.values()))
+        instance = source_class()
+        
+        settings = instance.get_available_settings()
+        
+        web_logger.debug(f"Found {len(settings)} available settings")
+        
+        return JSONResponse({
+            "settings": settings
+        })
+        
+    except Exception as e:
+        error_msg = f"Failed to get settings: {str(e)}"
+        web_logger.error(error_msg)
+        
+        return JSONResponse({
+            "error": error_msg
+        }, status_code=500)
+
+
+@router.get("/experiment/settings/{settings_name}/yaml")
+def get_settings_yaml(settings_name: str):
+    """
+    Get the raw YAML content for a specific settings file.
+    
+    This endpoint retrieves the YAML settings file content for
+    runtime configuration settings.
+    
+    Args:
+        settings_name: Settings name
+        
+    Returns:
+        JSONResponse containing:
+        - yaml: Raw YAML settings content as string
+        - error: Error message if retrieval fails
+        
+    Example:
+        GET /experiment/settings/default/yaml
+        Returns: {"yaml": "name: Default Settings\\nanalyze_verbose: true\\n..."}
+    """
+    try:
+        web_logger.debug(f"Retrieving YAML for settings {settings_name}")
+        
+        # Get any stats source instance to access settings
+        if not experiment_runner.src:
+            error_msg = "No stats sources available"
+            web_logger.warning(error_msg)
+            return JSONResponse({
+                "error": error_msg
+            }, status_code=404)
+        
+        # Use the first available stats source to get settings
+        source_class = next(iter(experiment_runner.src.values()))
+        instance = source_class()
+        
+        # Get settings file content
+        yaml_content = instance.get_settings_content(settings_name)
+        
+        if not yaml_content:
+            error_msg = f"Settings file not found: {settings_name}"
+            web_logger.warning(error_msg)
+            return JSONResponse({
+                "error": error_msg
+            }, status_code=404)
+        
+        web_logger.debug(f"Successfully retrieved settings YAML for {settings_name} ({len(yaml_content)} chars)")
+        
+        return JSONResponse({
+            "yaml": yaml_content
+        })
+        
+    except Exception as e:
+        error_msg = f"Failed to get settings YAML for {settings_name}: {str(e)}"
+        web_logger.error(error_msg)
+        
+        return JSONResponse({
+            "error": error_msg
+        }, status_code=500)
+
+
+@router.get("/experiment/configs/{stats_source}")
+def get_configurations(stats_source: str):
+    """
+    Get available configurations for a specific statistics source.
+    
+    This endpoint returns a list of all available configuration names
+    and their display names for the specified statistics source.
+    
+    Args:
+        stats_source: Statistics source identifier (e.g., 'default', 'empty_pg_stats')
+        
+    Returns:
+        JSONResponse containing:
+        - configs: List of (config_name, display_name) tuples
+        - error: Error message if retrieval fails
+        
+    Example:
+        GET /experiment/configs/default
+        Returns: {"configs": [["default", "Default Configuration"], ["fast", "Fast Config"]]}
+    """
+    try:
+        web_logger.debug(f"Retrieving configurations for {stats_source}")
+        
+        # Validate stats source exists
+        if stats_source not in experiment_runner.src:
+            error_msg = f"Unknown stats source: {stats_source}"
+            web_logger.warning(error_msg)
+            return JSONResponse({
+                "error": error_msg
+            }, status_code=404)
+        
+        # Get the source class and create instance
+        source_class = experiment_runner.src[stats_source]
+        instance = source_class()
+        
+        configs = instance.get_available_configs()
+        
+        web_logger.debug(f"Found {len(configs)} configurations for {stats_source}")
+        
+        return JSONResponse({
+            "configs": configs
+        })
+        
+    except Exception as e:
+        error_msg = f"Failed to get configurations for {stats_source}: {str(e)}"
+        web_logger.error(error_msg)
+        
+        return JSONResponse({
+            "error": error_msg
+        }, status_code=500)
+
+
+@router.get("/experiment/configs/{stats_source}/{config_name}/yaml")
+def get_configuration_yaml(stats_source: str, config_name: str):
+    """
+    Get the raw YAML content for a specific configuration.
+    
+    This endpoint retrieves the YAML configuration file content for
+    a specific statistics source and configuration name combination.
+    This is used for displaying configuration content in the UI
+    and for configuration editing functionality.
+    
+    Args:
+        stats_source: Statistics source identifier
+        config_name: Configuration name within the stats source
+        
+    Returns:
+        JSONResponse containing:
+        - yaml: Raw YAML configuration content as string
+        - error: Error message if retrieval fails
+        
+    Example:
+        GET /experiment/configs/default/default/yaml
+        Returns: {"yaml": "name: Default Config\\nmessage: Test message\\n..."}
+    """
+    try:
+        web_logger.debug(f"Retrieving YAML for {stats_source}/{config_name}")
+        
+        # Validate stats source exists
+        if stats_source not in experiment_runner.src:
+            error_msg = f"Unknown stats source: {stats_source}"
+            web_logger.warning(error_msg)
+            return JSONResponse({
+                "error": error_msg
+            }, status_code=404)
+        
+        # Get the source class and create instance
+        source_class = experiment_runner.src[stats_source]
+        instance = source_class()
+        
+        # Get configuration file content
+        yaml_content = instance.get_config_content(config_name)
+        
+        if not yaml_content:
+            error_msg = f"Configuration file not found: {config_name}"
+            web_logger.warning(error_msg)
+            return JSONResponse({
+                "error": error_msg
+            }, status_code=404)
+        
+        web_logger.debug(f"Successfully retrieved YAML content for {stats_source}/{config_name} ({len(yaml_content)} chars)")
+        
+        return JSONResponse({
+            "yaml": yaml_content
+        })
+        
+    except Exception as e:
+        error_msg = f"Failed to get YAML for {stats_source}/{config_name}: {str(e)}"
+        web_logger.error(error_msg)
+        
+        return JSONResponse({
+            "error": error_msg
+        }, status_code=500) 
\ No newline at end of file
diff --git a/app/app/services/experiment_runner.py b/app/app/services/experiment_runner.py
index 3ff7deb..61cd914 100644
--- a/app/app/services/experiment_runner.py
+++ b/app/app/services/experiment_runner.py
@@ -22,7 +22,7 @@ from sqlmodel import Session
 from datetime import datetime
 
 from ..models import Experiment, Trial
-from ..src.base import StatsSource, StatsSourceConfig
+from ..src.base import StatsSource, StatsSourceConfig, StatsSourceSettings
 from ..logging_config import experiment_logger, stats_logger, stats_source_logger
 from ..database import create_database, drop_database, load_dump, get_db_session
 
@@ -107,8 +107,9 @@ class ExperimentRunner:
         instance = source_class()
         return instance.get_available_configs()
     
-    def run_experiment(self, session: Session, stats_source: str, config_name: str, 
-                      config_yaml: str, query: str, iterations: int, 
+    def run_experiment(self, session: Session, stats_source: str, 
+                      settings_name: str, settings_yaml: str,
+                      config_name: str, config_yaml: str, query: str, iterations: int, 
                       stats_reset_strategy: str, transaction_handling: str, 
                       progress_callback: Callable[[str, int, int], None], 
                       dump_path: str, name: str) -> Experiment:
@@ -118,6 +119,8 @@ class ExperimentRunner:
         Args:
             session: Database session for storing results
             stats_source: Statistics source identifier
+            settings_name: Named settings (optional)
+            settings_yaml: Custom YAML settings (optional)
             config_name: Named configuration (optional)
             config_yaml: Custom YAML configuration (optional)
             query: SQL query to execute
@@ -154,22 +157,26 @@ class ExperimentRunner:
         experiment_logger.info(f"Starting experiment '{name}' with {stats_source} stats source")
         experiment_logger.debug(f"Query: {query}")
         experiment_logger.debug(f"Iterations: {iterations}")
+        experiment_logger.info(f"Settings: {settings_name or 'default'}")
+        experiment_logger.info(f"Config: {config_name or 'default'}")
         experiment_logger.info(f"Stats reset strategy: {stats_reset_strategy}")  
         experiment_logger.info(f"Transaction handling: {transaction_handling}")
         experiment_logger.info(f"Using temporary database: {db_name} from dump: {dump_path}")
         
-        # Setup statistics source and configuration
-        stats_source_instance, original_config_yaml, config_modified, config_modified_at = \
-            self._setup_stats_source_config(stats_source, config_name, config_yaml)
+        # Setup statistics source with both settings and configuration
+        stats_source_instance, original_settings_yaml, settings_modified, settings_modified_at, original_config_yaml, config_modified, config_modified_at = \
+            self._setup_stats_source_config(stats_source, settings_name, settings_yaml, config_name, config_yaml)
             
-        # Store the actual YAML configuration that will be used
+        # Store the actual YAML files that will be used
+        actual_settings_yaml = settings_yaml if settings_yaml else original_settings_yaml
         actual_config_yaml = config_yaml if config_yaml else original_config_yaml
         
         # Create experiment record
         experiment = self._create_experiment_record(
-            session, name, stats_source_instance, config_name, actual_config_yaml,  
-            original_config_yaml, config_modified, config_modified_at, query,
-            iterations, stats_reset_strategy, transaction_handling
+            session, name, stats_source_instance, 
+            settings_name, actual_settings_yaml, original_settings_yaml, settings_modified, settings_modified_at,
+            config_name, actual_config_yaml, original_config_yaml, config_modified, config_modified_at, 
+            query, iterations, stats_reset_strategy, transaction_handling
         )
         
         # Execute the experiment
@@ -189,27 +196,62 @@ class ExperimentRunner:
             self._handle_experiment_failure(session, experiment, e)
             raise
             
-    def _setup_stats_source_config(self, stats_source: str, config_name: str, 
-                                  config_yaml: str) -> Tuple[StatsSource, str, bool, datetime]:
+    def _setup_stats_source_config(self, stats_source: str, settings_name: str, settings_yaml: str,
+                                  config_name: str, config_yaml: str) -> Tuple[StatsSource, str, bool, datetime, str, bool, datetime]:
         """
-        Setup statistics source instance and configuration.
+        Setup statistics source instance with both settings and configuration.
         
         Returns:
-            Tuple of (stats_source_instance, original_config_yaml, config_modified, config_modified_at)
+            Tuple of (stats_source_instance, original_settings_yaml, settings_modified, settings_modified_at, original_config_yaml, config_modified, config_modified_at)
         """
+        import yaml
+        
         source_class = self.src[stats_source]
         
-        # Initialize configuration tracking variables
+        # Handle settings
+        settings = None
+        original_settings_yaml = None
+        settings_modified = False
+        settings_modified_at = None
+        
+        if settings_yaml:
+            # Use custom YAML settings provided by user
+            settings_data = yaml.safe_load(settings_yaml)
+            settings = StatsSourceSettings(settings_data)
+            experiment_logger.info(f"Using custom settings: {settings.name}")
+            
+            # Get original settings for comparison
+            effective_settings_name = settings_name or 'default'
+            original_settings_yaml = source_class().get_settings_content(effective_settings_name)
+            
+            # Check if settings were actually modified
+            if original_settings_yaml and settings_yaml.strip() != original_settings_yaml.strip():
+                settings_modified = True
+                settings_modified_at = datetime.utcnow()
+                experiment_logger.info("Settings were modified from original")
+            else:
+                experiment_logger.info("Settings unchanged from original")
+        elif settings_name:
+            # Use named settings
+            settings = source_class().load_settings(settings_name)
+            original_settings_yaml = source_class().get_settings_content(settings_name)
+            experiment_logger.info(f"Using named settings: {settings_name}")
+        else:
+            # Use default settings
+            settings = source_class()._load_default_settings()
+            original_settings_yaml = source_class().get_settings_content('default')
+            experiment_logger.info("Using default settings")
+        
+        # Handle configuration
+        config = None
         original_config_yaml = None
         config_modified = False
         config_modified_at = None
         
         if config_yaml:
             # Use custom YAML configuration provided by user
-            import yaml
             config_data = yaml.safe_load(config_yaml)
             config = StatsSourceConfig(config_data)
-            stats_source_instance = source_class(config)
             experiment_logger.info(f"Using custom configuration: {config.name}")
             
             # Get original configuration for comparison
@@ -227,17 +269,19 @@ class ExperimentRunner:
             # Use named or default configuration
             effective_config_name = config_name or 'default'
             config = source_class().load_config(effective_config_name)
-            stats_source_instance = source_class(config)
-            experiment_logger.info(f"Using named/default configuration: {effective_config_name}")
-            
-            # Get the original YAML for the named configuration
             original_config_yaml = source_class().get_config_content(effective_config_name)
-            
-        return stats_source_instance, original_config_yaml, config_modified, config_modified_at
+            experiment_logger.info(f"Using named/default configuration: {effective_config_name}")
+        
+        # Create stats source instance with both settings and config
+        stats_source_instance = source_class(settings=settings, config=config)
+        
+        return stats_source_instance, original_settings_yaml, settings_modified, settings_modified_at, original_config_yaml, config_modified, config_modified_at
         
     def _create_experiment_record(self, session: Session, name: str, 
-                                stats_source_instance: StatsSource, config_name: str,
-                                actual_config_yaml: str, original_config_yaml: str,
+                                stats_source_instance: StatsSource, settings_name: str,
+                                actual_settings_yaml: str, original_settings_yaml: str,
+                                settings_modified: bool, settings_modified_at: datetime,
+                                config_name: str, actual_config_yaml: str, original_config_yaml: str,
                                 config_modified: bool, config_modified_at: datetime,
                                 query: str, iterations: int, stats_reset_strategy: str,
                                 transaction_handling: str) -> Experiment:
@@ -248,6 +292,11 @@ class ExperimentRunner:
             experiment = Experiment(
                 name=name,
                 stats_source=stats_source_instance.display_name(),
+                settings_name=settings_name or 'default',
+                settings_yaml=actual_settings_yaml,
+                original_settings_yaml=original_settings_yaml,
+                settings_modified=settings_modified,
+                settings_modified_at=settings_modified_at,
                 config_name=config_name or 'default',
                 config_yaml=actual_config_yaml,
                 original_config_yaml=original_config_yaml,
@@ -322,24 +371,21 @@ class ExperimentRunner:
         
     def _configure_database_session(self, session: Session, stats_source_instance: StatsSource) -> None:
         """Configure database session parameters."""
-        # Set session parameters for consistent execution environment
-        timeout = stats_source_instance.config.get_setting('statement_timeout_ms', 0)
+        # Set session parameters for consistent execution environment using settings
+        # Use default timeout if not specified (0 means no timeout)
+        timeout = getattr(stats_source_instance.settings, 'analyze_timeout_seconds', 300) * 1000  # Convert to ms
         session.execute(text(f"SET statement_timeout = {timeout}"))
         
-        work_mem = stats_source_instance.config.get_setting('work_mem', '16MB')
+        work_mem = getattr(stats_source_instance.settings, 'work_mem', '16MB')
         session.execute(text(f"SET work_mem = '{work_mem}'"))
         
-        maint_work_mem = stats_source_instance.config.get_setting('maintenance_work_mem', '16MB')
+        maint_work_mem = getattr(stats_source_instance.settings, 'maintenance_work_mem', '16MB')
         session.execute(text(f"SET maintenance_work_mem = '{maint_work_mem}'"))
         
-        cache_size = stats_source_instance.config.get_setting('effective_cache_size', '1GB')
-        session.execute(text(f"SET effective_cache_size = '{cache_size}'"))
-        
-        random_cost = stats_source_instance.config.get_setting('random_page_cost', 1.0)
-        session.execute(text(f"SET random_page_cost = {random_cost}"))
-        
-        seq_cost = stats_source_instance.config.get_setting('seq_page_cost', 1.0)
-        session.execute(text(f"SET seq_page_cost = {seq_cost}"))
+        # Use default values for settings not in the settings object
+        session.execute(text("SET effective_cache_size = '1GB'"))
+        session.execute(text("SET random_page_cost = 1.0"))
+        session.execute(text("SET seq_page_cost = 1.0"))
         
         session.commit()
         
diff --git a/app/app/services/trial_executor.py b/app/app/services/trial_executor.py
index fe12803..c46d0d9 100644
--- a/app/app/services/trial_executor.py
+++ b/app/app/services/trial_executor.py
@@ -93,11 +93,11 @@ class TrialExecutor:
             stats_source_instance: Statistics source configuration
         """
         # Enhanced cache clearing if configured
-        if stats_source_instance.config.get_setting('clear_caches', True):
+        if stats_source_instance.settings.clear_caches:
             self._clear_database_caches(session)
             
         # Reset statistics counters if configured
-        if stats_source_instance.config.get_setting('reset_counters', True):
+        if stats_source_instance.settings.reset_counters:
             self._reset_statistics_counters(session)
             
     def _clear_database_caches(self, session: Session) -> None:
diff --git a/app/app/src/base.py b/app/app/src/base.py
index a247706..763159f 100644
--- a/app/app/src/base.py
+++ b/app/app/src/base.py
@@ -8,8 +8,41 @@ from pathlib import Path
 from typing import Dict, List, Tuple, Any
 
 
+class StatsSourceSettings:
+    """Container for statistics source runtime settings."""
+    
+    def __init__(self, settings_data: Dict[str, Any]):
+        self.name = settings_data.get('name', 'default')
+        self.description = settings_data.get('description', '')
+        self.analyze_verbose = settings_data.get('analyze_verbose', True)
+        self.analyze_timeout_seconds = settings_data.get('analyze_timeout_seconds', 300)
+        self.clear_caches = settings_data.get('clear_caches', True)
+        self.reset_counters = settings_data.get('reset_counters', True)
+        self.work_mem = settings_data.get('work_mem', '16MB')
+        self.maintenance_work_mem = settings_data.get('maintenance_work_mem', '16MB')
+
+
 class StatsSourceConfig:
-    """Container for statistics source configuration."""
+    """Container for statistics source configuration data."""
+    
+    def __init__(self, config_data: Dict[str, Any]):
+        self.name = config_data.get('name', 'default')
+        self.description = config_data.get('description', '')
+        self.message = config_data.get('message', '')
+        # Store all other data fields for extensibility
+        self._data = {k: v for k, v in config_data.items() 
+                     if k not in ['name', 'description', 'message']}
+    
+    def get_data(self, key: str, default=None):
+        """Get configuration data with optional default."""
+        if key == 'message':
+            return self.message
+        return self._data.get(key, default)
+
+
+# Legacy class for backward compatibility during transition
+class StatsSourceLegacyConfig:
+    """Legacy container for statistics source configuration - for backward compatibility."""
     
     def __init__(self, config_data: Dict[str, Any]):
         self.name = config_data.get('name', 'default')
@@ -29,20 +62,61 @@ class StatsSourceConfig:
 class StatsSource(ABC):
     """Abstract base class for statistics sources."""
     
-    def __init__(self, config: StatsSourceConfig = None):
-        self.config = config or self._load_default_config()
+    def __init__(self, settings: StatsSourceSettings = None, config: StatsSourceConfig = None, legacy_config: StatsSourceLegacyConfig = None):
+        # Support both new and legacy initialization patterns
+        if legacy_config:
+            # Legacy mode - convert to new format
+            self.settings = self._legacy_to_settings(legacy_config)
+            self.config = self._legacy_to_config(legacy_config)
+        else:
+            self.settings = settings or self._load_default_settings()
+            self.config = config or self._load_default_config()
+        
         # Use the specialized stats source logger for frontend integration
         self.logger = stats_source_logger
     
+    def _legacy_to_settings(self, legacy_config: StatsSourceLegacyConfig) -> StatsSourceSettings:
+        """Convert legacy config to new settings format."""
+        settings_data = {
+            'name': legacy_config.name,
+            'description': legacy_config.description,
+            'analyze_verbose': legacy_config.get_setting('analyze_verbose', True),
+            'analyze_timeout_seconds': legacy_config.get_setting('analyze_timeout_seconds', 300),
+            'clear_caches': legacy_config.get_setting('clear_caches', True),
+            'reset_counters': legacy_config.get_setting('reset_counters', True),
+            'work_mem': legacy_config.get_setting('work_mem', '16MB'),
+            'maintenance_work_mem': legacy_config.get_setting('maintenance_work_mem', '16MB'),
+        }
+        return StatsSourceSettings(settings_data)
+    
+    def _legacy_to_config(self, legacy_config: StatsSourceLegacyConfig) -> StatsSourceConfig:
+        """Convert legacy config to new config format."""
+        config_data = {
+            'name': legacy_config.name,
+            'description': legacy_config.description,
+            'message': legacy_config.get_data('message', ''),
+        }
+        return StatsSourceConfig(config_data)
+    
+    def _load_default_settings(self) -> StatsSourceSettings:
+        """Load the default settings."""
+        settings_path = self._get_settings_path('default.yaml')
+        return self._load_settings_from_file(settings_path)
+    
     def _load_default_config(self) -> StatsSourceConfig:
         """Load the default configuration for this stats source."""
         config_path = self._get_config_path('default.yaml')
         return self._load_config_from_file(config_path)
     
+    def _get_settings_dir(self) -> Path:
+        """Get the settings directory."""
+        src_dir = Path(__file__).parent
+        return src_dir / 'settings'
+    
     def _get_config_dir(self) -> Path:
         """Get the configuration directory for this stats source."""
         # Get the directory name from the class name
-        # e.g., DefaultStatsSource -> direct_pg
+        # e.g., DefaultStatsSource -> default
         class_name = self.__class__.__name__
         if class_name.endswith('StatsSource'):
             class_name = class_name[:-11]  # Remove 'StatsSource' suffix
@@ -56,10 +130,25 @@ class StatsSource(ABC):
         src_dir = Path(__file__).parent
         return src_dir / snake_case / 'config'
     
+    def _get_settings_path(self, settings_name: str) -> Path:
+        """Get the full path to a settings file."""
+        return self._get_settings_dir() / settings_name
+    
     def _get_config_path(self, config_name: str) -> Path:
         """Get the full path to a configuration file."""
         return self._get_config_dir() / config_name
     
+    def _load_settings_from_file(self, settings_path: Path) -> StatsSourceSettings:
+        """Load settings from a YAML file."""
+        try:
+            with open(settings_path, 'r') as f:
+                settings_data = yaml.safe_load(f)
+            return StatsSourceSettings(settings_data)
+        except Exception as e:
+            self.logger.error(f"Failed to load settings from {settings_path}: {str(e)}")
+            # Return a minimal default settings
+            return StatsSourceSettings({'name': 'default'})
+    
     def _load_config_from_file(self, config_path: Path) -> StatsSourceConfig:
         """Load configuration from a YAML file."""
         try:
@@ -69,7 +158,22 @@ class StatsSource(ABC):
         except Exception as e:
             self.logger.error(f"Failed to load config from {config_path}: {str(e)}")
             # Return a minimal default config
-            return StatsSourceConfig({'name': 'default', 'settings': {}})
+            return StatsSourceConfig({'name': 'default'})
+    
+    def get_available_settings(self) -> List[Tuple[str, str]]:
+        """Get list of available settings as (filename, display_name) tuples."""
+        settings_dir = self._get_settings_dir()
+        settings = []
+        
+        if settings_dir.exists():
+            for settings_file in settings_dir.glob('*.yaml'):
+                try:
+                    settings_obj = self._load_settings_from_file(settings_file)
+                    settings.append((settings_file.stem, settings_obj.description or settings_obj.name))
+                except Exception as e:
+                    self.logger.warning(f"Failed to load settings {settings_file}: {str(e)}")
+        
+        return settings
     
     def get_available_configs(self) -> List[Tuple[str, str]]:
         """Get list of available configurations as (filename, display_name) tuples."""
@@ -86,11 +190,28 @@ class StatsSource(ABC):
         
         return configs
     
+    def load_settings(self, settings_name: str) -> StatsSourceSettings:
+        """Load specific settings by name."""
+        settings_path = self._get_settings_path(f"{settings_name}.yaml")
+        return self._load_settings_from_file(settings_path)
+    
     def load_config(self, config_name: str) -> StatsSourceConfig:
         """Load a specific configuration by name."""
         config_path = self._get_config_path(f"{config_name}.yaml")
         return self._load_config_from_file(config_path)
     
+    def get_settings_content(self, settings_name: str) -> str:
+        """Get the raw content of a settings file."""
+        settings_path = self._get_settings_path(f"{settings_name}.yaml")
+        if not settings_path.exists():
+            return ""
+        try:
+            with open(settings_path, 'r') as f:
+                return f.read()
+        except Exception as e:
+            self.logger.error(f"Failed to read settings file {settings_path}: {str(e)}")
+            return ""
+    
     def get_config_content(self, config_name: str) -> str:
         """Get the raw content of a configuration file."""
         config_path = self._get_config_path(f"{config_name}.yaml")
@@ -103,9 +224,26 @@ class StatsSource(ABC):
             self.logger.error(f"Failed to read config file {config_path}: {str(e)}")
             return ""
     
+    # Legacy methods for backward compatibility
+    def _load_default_config_legacy(self) -> StatsSourceLegacyConfig:
+        """Load the default configuration for this stats source (legacy method)."""
+        config_path = self._get_config_path('default.yaml')
+        return self._load_config_from_file_legacy(config_path)
+    
+    def _load_config_from_file_legacy(self, config_path: Path) -> StatsSourceLegacyConfig:
+        """Load configuration from a YAML file (legacy method)."""
+        try:
+            with open(config_path, 'r') as f:
+                config_data = yaml.safe_load(f)
+            return StatsSourceLegacyConfig(config_data)
+        except Exception as e:
+            self.logger.error(f"Failed to load config from {config_path}: {str(e)}")
+            # Return a minimal default config
+            return StatsSourceLegacyConfig({'name': 'default', 'settings': {}})
+    
     def clear_caches(self, session: Session) -> None:
         """Clear PostgreSQL caches and buffers."""
-        if not self.config.get_setting('clear_caches', True):
+        if not self.settings.clear_caches:
             self.logger.info("Cache clearing disabled by configuration")
             return
             
@@ -126,10 +264,10 @@ class StatsSource(ABC):
                 # Reset autocommit to false for subsequent operations
                 conn.set_session(autocommit=False)
             
-            # Configure memory settings from config
-            work_mem = self.config.get_setting('work_mem', '16MB')
-            maintenance_work_mem = self.config.get_setting('maintenance_work_mem', '16MB')
-            timeout = self.config.get_setting('analyze_timeout_seconds', 300)
+            # Configure memory settings from settings
+            work_mem = self.settings.work_mem
+            maintenance_work_mem = self.settings.maintenance_work_mem
+            timeout = self.settings.analyze_timeout_seconds
             
             session.execute(text(f"SET LOCAL statement_timeout = {timeout * 1000}"))  # Convert to milliseconds
             session.execute(text(f"SET LOCAL work_mem = '{work_mem}'"))
@@ -137,7 +275,7 @@ class StatsSource(ABC):
             self.logger.debug(f"Configured memory settings: work_mem={work_mem}, maintenance_work_mem={maintenance_work_mem}")
             
             # Reset various PostgreSQL statistics counters if enabled
-            if self.config.get_setting('reset_counters', True):
+            if self.settings.reset_counters:
                 session.execute(text("SELECT pg_stat_reset()"))
                 session.execute(text("SELECT pg_stat_reset_shared('bgwriter')"))
                 session.execute(text("SELECT pg_stat_reset_single_table_counters(0)"))
@@ -168,7 +306,7 @@ class StatsSource(ABC):
             self.logger.info("Running ANALYZE to update statistics")
             
             # Use verbose mode if configured
-            analyze_verbose = self.config.get_setting('analyze_verbose', True)
+            analyze_verbose = self.settings.analyze_verbose
             analyze_stmt = text("ANALYZE VERBOSE" if analyze_verbose else "ANALYZE")
             
             session.execute(analyze_stmt)
@@ -187,4 +325,4 @@ class StatsSource(ABC):
     
     def display_name(self) -> str:
         """Return the display name including configuration."""
-        return f"{self.name()} ({self.config.name})" 
\ No newline at end of file
+        return f"{self.name()} (Settings: {self.settings.name}, Config: {self.config.name})" 
\ No newline at end of file
diff --git a/app/app/src/default/config/default.yaml b/app/app/src/default/config/default.yaml
index 4afc981..6af46ba 100644
--- a/app/app/src/default/config/default.yaml
+++ b/app/app/src/default/config/default.yaml
@@ -1,11 +1,3 @@
 name: default
 description: "Default PostgreSQL built-in statistics configuration"
-settings:
-  analyze_verbose: true
-  analyze_timeout_seconds: 300
-  clear_caches: true
-  reset_counters: true
-  work_mem: "16MB"
-  maintenance_work_mem: "16MB" 
-data:
-  message: "This is a test message. Settings are generally determine the enviroment, but data is for other aspects of the program (epsilon, prompts, etc)"
\ No newline at end of file
+message: "This is a test message. Settings are generally determine the enviroment, but data is for other aspects of the program (epsilon, prompts, etc)"
\ No newline at end of file
diff --git a/app/app/src/default/config/fast.yaml b/app/app/src/default/config/fast.yaml
index 6bfdc9d..fbe27d6 100644
--- a/app/app/src/default/config/fast.yaml
+++ b/app/app/src/default/config/fast.yaml
@@ -1,11 +1,3 @@
 name: fast
 description: "Fast PostgreSQL statistics with reduced timeouts"
-settings:
-  analyze_verbose: false
-  analyze_timeout_seconds: 60
-  clear_caches: false
-  reset_counters: false
-  work_mem: "8MB"
-  maintenance_work_mem: "8MB" 
-data:
-  message: "This is a test message. Settings are generally determine the enviroment, but data is for other aspects of the program (epsilon, prompts, etc)"
\ No newline at end of file
+message: "This is a test message. Settings are generally determine the enviroment, but data is for other aspects of the program (epsilon, prompts, etc)"
\ No newline at end of file
diff --git a/app/app/src/default/default.py b/app/app/src/default/default.py
index d252b5b..5056e20 100644
--- a/app/app/src/default/default.py
+++ b/app/app/src/default/default.py
@@ -1,13 +1,13 @@
 from sqlalchemy import text
-from ..base import StatsSource, StatsSourceConfig
+from ..base import StatsSource, StatsSourceConfig, StatsSourceSettings, StatsSourceLegacyConfig
 from sqlmodel import Session
 
 class DefaultStatsSource(StatsSource):
     """Statistics source that uses PostgreSQL's built-in statistics."""
     
-    def __init__(self, config: StatsSourceConfig = None):
-        super().__init__(config)
-        self.logger.info(f"Initialized {self.name()} with configuration: {self.config.name}")
+    def __init__(self, settings: StatsSourceSettings = None, config: StatsSourceConfig = None, legacy_config: StatsSourceLegacyConfig = None):
+        super().__init__(settings=settings, config=config, legacy_config=legacy_config)
+        self.logger.info(f"Initialized {self.name()} with settings: {self.settings.name}, config: {self.config.name}")
     
     def apply_statistics(self, session: Session) -> None:
         """Run ANALYZE to ensure built-in statistics are up-to-date."""
diff --git a/app/app/src/empty_pg_stats/config/default.yaml b/app/app/src/empty_pg_stats/config/default.yaml
index 7c6a5c6..df147ea 100644
--- a/app/app/src/empty_pg_stats/config/default.yaml
+++ b/app/app/src/empty_pg_stats/config/default.yaml
@@ -1,7 +1,3 @@
 name: "Default Empty PG Stats"
 description: "Clears all caches and statistics counters in PostgreSQL. Does not run ANALYZE."
-settings:
-  clear_caches: true
-  reset_counters: true
-  # analyze_verbose is not used by this source
-  analyze_verbose: false 
\ No newline at end of file
+message: "Empty PG Stats - clears caches and counters without running ANALYZE" 
\ No newline at end of file
diff --git a/app/app/src/empty_pg_stats/empty_pg_stats.py b/app/app/src/empty_pg_stats/empty_pg_stats.py
index 0c066dd..b2626fc 100644
--- a/app/app/src/empty_pg_stats/empty_pg_stats.py
+++ b/app/app/src/empty_pg_stats/empty_pg_stats.py
@@ -1,4 +1,4 @@
-from ..base import StatsSource, StatsSourceConfig
+from ..base import StatsSource, StatsSourceConfig, StatsSourceSettings, StatsSourceLegacyConfig
 from sqlmodel import Session
 
 class EmptyPgStatsStatsSource(StatsSource):
@@ -7,9 +7,9 @@ class EmptyPgStatsStatsSource(StatsSource):
     without applying any new ones.
     """
 
-    def __init__(self, config: StatsSourceConfig = None):
-        super().__init__(config)
-        self.logger.info(f"Initialized {self.name()} with configuration: {self.config.name}")
+    def __init__(self, settings: StatsSourceSettings = None, config: StatsSourceConfig = None, legacy_config: StatsSourceLegacyConfig = None):
+        super().__init__(settings=settings, config=config, legacy_config=legacy_config)
+        self.logger.info(f"Initialized {self.name()} with settings: {self.settings.name}, config: {self.config.name}")
 
     def apply_statistics(self, session: Session) -> None:
         """
diff --git a/app/app/src/settings/default.yaml b/app/app/src/settings/default.yaml
new file mode 100644
index 0000000..7dfb52f
--- /dev/null
+++ b/app/app/src/settings/default.yaml
@@ -0,0 +1,8 @@
+name: default
+description: "Default PostgreSQL runtime settings configuration"
+analyze_verbose: true
+analyze_timeout_seconds: 300
+clear_caches: true
+reset_counters: true
+work_mem: "16MB"
+maintenance_work_mem: "16MB" 
\ No newline at end of file
diff --git a/app/app/src/settings/empty_pg_stats.yaml b/app/app/src/settings/empty_pg_stats.yaml
new file mode 100644
index 0000000..b609fa3
--- /dev/null
+++ b/app/app/src/settings/empty_pg_stats.yaml
@@ -0,0 +1,8 @@
+name: "Default Empty PG Stats Settings"
+description: "Runtime settings for Empty PG Stats - clears caches and counters"
+analyze_verbose: false
+analyze_timeout_seconds: 60
+clear_caches: true
+reset_counters: true
+work_mem: "8MB"
+maintenance_work_mem: "8MB" 
\ No newline at end of file
diff --git a/app/app/src/settings/fast.yaml b/app/app/src/settings/fast.yaml
new file mode 100644
index 0000000..015bd2c
--- /dev/null
+++ b/app/app/src/settings/fast.yaml
@@ -0,0 +1,8 @@
+name: fast
+description: "Fast PostgreSQL runtime settings with reduced timeouts"
+analyze_verbose: false
+analyze_timeout_seconds: 60
+clear_caches: false
+reset_counters: false
+work_mem: "8MB"
+maintenance_work_mem: "8MB" 
\ No newline at end of file
diff --git a/app/app/static/js/experiment-form.js b/app/app/static/js/experiment-form.js
index 09f4bf5..546ecfa 100644
--- a/app/app/static/js/experiment-form.js
+++ b/app/app/static/js/experiment-form.js
@@ -11,202 +11,205 @@
  * Created: 2024
  */
 
-// Global variables for experiment form functionality
-let currentLogLevel = 'info';
-let logHistory = [];
-let streamClosed = false;
-let originalYamlConfig = '';
-let currentStatsSource = '';
+// Global variables for experiment tracking
 let currentExperimentId = null;
 let eventSource = null;
+let logHistory = [];
+let currentLogLevel = 'info';
+let streamClosed = false;
+let currentStatsSource = null;
+let originalSettingsYaml = '';
+let originalConfigYaml = '';
 
 /**
- * Initialize experiment form functionality when DOM is loaded
+ * Initialize everything when DOM is loaded
  */
 document.addEventListener('DOMContentLoaded', function() {
+    setupHTMXEventHandlers();
     initializeFormValidation();
     initializeConfigurationHandlers();
     checkInitialConfigState();
-    setupHTMXEventHandlers();
 });
 
 /**
- * Set up HTMX event handlers for experiment progress
+ * Setup HTMX event handlers for experiment tracking
  */
 function setupHTMXEventHandlers() {
-    console.log('Setting up HTMX event handlers...');
-    
-    // Listen for HTMX after swap events to initialize SSE connections
-    document.body.addEventListener('htmx:afterSwap', function(event) {
-        console.log('HTMX after swap event received:', event);
-        
-        // Check if the swapped content contains experiment progress
-        const experimentResult = event.detail.target.querySelector('#experiment-result');
-        if (experimentResult) {
-            console.log('Found experiment result in swapped content');
-            // Extract experiment ID from progress bar ID
-            const progressBar = experimentResult.querySelector('[id^="progress-bar-"]');
-            if (progressBar) {
-                const experimentId = progressBar.id.replace('progress-bar-', '');
-                currentExperimentId = parseInt(experimentId);
-                console.log('Starting SSE connection for experiment:', currentExperimentId);
+    // After successful submission
+    document.body.addEventListener('htmx:afterRequest', function(event) {
+        if (event.detail.xhr.status === 200 && event.detail.target.id === 'experiment-container') {
+            const response = JSON.parse(event.detail.xhr.responseText);
+            if (response.experiment_id) {
+                currentExperimentId = response.experiment_id;
                 initializeExperimentProgress(currentExperimentId);
-                
-                // Start pure JavaScript EventSource connection
-                startEventSourceConnection(currentExperimentId);
-            } else {
-                console.log('No progress bar found in experiment result');
             }
-        } else {
-            console.log('No experiment result found in swapped content');
         }
     });
-    
-    console.log('HTMX event handlers setup complete');
+
+    // Before form submission
+    document.body.addEventListener('htmx:beforeRequest', function(event) {
+        if (event.detail.target.id === 'experiment-form') {
+            // Clear any previous experiment state
+            currentExperimentId = null;
+            logHistory = [];
+            streamClosed = false;
+            
+            // Close any existing event source
+            cleanupEventSource();
+        }
+    });
+
+    // On error
+    document.body.addEventListener('htmx:responseError', function(event) {
+        console.error('HTMX Request Error:', event.detail);
+        if (event.detail.target.id === 'experiment-container') {
+            const errorContainer = document.getElementById('experiment-container');
+            if (errorContainer) {
+                errorContainer.innerHTML = `
+                    <div class="alert alert-danger" role="alert">
+                        <i class="bi bi-exclamation-triangle me-2"></i>
+                        <strong>Error:</strong> Failed to start experiment. Please check your inputs and try again.
+                    </div>
+                `;
+            }
+        }
+    });
+
+    // Clean up on unload
+    window.addEventListener('beforeunload', cleanupEventSource);
 }
 
 /**
- * Start EventSource connection for real-time experiment updates
- * @param {number} experimentId - The experiment ID to track
+ * Start EventSource connection for real-time updates
+ * @param {string} experimentId - The experiment ID to track
  */
 function startEventSourceConnection(experimentId) {
-    // Close any existing connection
-    if (eventSource) {
-        eventSource.close();
-    }
+    const eventSourceUrl = `/experiment/stream/${experimentId}`;
+    console.log(`Starting EventSource connection to: ${eventSourceUrl}`);
     
-    const url = `/experiment/stream/${experimentId}`;
-    console.log('Opening EventSource connection to:', url);
+    eventSource = new EventSource(eventSourceUrl);
     
-    eventSource = new EventSource(url);
-    
-    eventSource.onopen = function(event) {
-        console.log('EventSource connection opened:', event);
-        addLogMessage('🔗 Real-time connection established', 'info');
+    eventSource.onopen = function() {
+        console.log('EventSource connection opened');
     };
     
     eventSource.onmessage = function(event) {
-        console.log('EventSource message received:', event.data);
         try {
             const data = JSON.parse(event.data);
-            console.log('Parsed EventSource data:', data);
+            console.log('SSE Message received:', data);
             handleSSEMessage(data);
         } catch (error) {
-            console.error('Error parsing EventSource message:', error, 'Raw data:', event.data);
+            console.error('Error parsing SSE message:', error);
         }
     };
     
-    eventSource.onerror = function(event) {
-        console.error('EventSource error:', event);
+    eventSource.onerror = function(error) {
+        console.error('EventSource error:', error);
+        
+        // Check if connection is closed
         if (eventSource.readyState === EventSource.CLOSED) {
-            console.log('EventSource connection closed');
-            addLogMessage('🔌 Connection closed', 'info');
-        } else {
-            console.error('EventSource connection error');
-            addLogMessage('❌ Connection error', 'error');
+            console.log('EventSource connection closed by server');
+            streamClosed = true;
         }
     };
 }
 
 /**
- * Initialize experiment progress tracking for a specific experiment
- * @param {number} experimentId - The experiment ID to track
+ * Initialize experiment progress tracking
+ * @param {string} experimentId - The experiment ID to track
  */
 function initializeExperimentProgress(experimentId) {
-    currentExperimentId = experimentId;
-    logHistory = [];
-    streamClosed = false;
-    
-    // Initialize progress display
-    updateProgressBar(0, 0);
-    clearProgressLog();
-    
-    // Add initial status message
-    addLogMessage('⏳ Initializing experiment...', 'info');
-    
-    console.log(`Initialized progress tracking for experiment ${experimentId}`);
+    console.log(`Initializing progress tracking for experiment: ${experimentId}`);
+    
+    // Start EventSource connection
+    startEventSourceConnection(experimentId);
+    
+    // Initialize log level filter buttons if they exist
+    const logLevelButtons = document.querySelectorAll('[onclick^="setLogLevel"]');
+    if (logLevelButtons.length > 0) {
+        // Set default to info level
+        const infoButton = Array.from(logLevelButtons).find(btn => btn.textContent.trim() === 'Info');
+        if (infoButton) {
+            setLogLevel('info', infoButton);
+        }
+    }
 }
 
 /**
- * Handle incoming SSE messages
- * @param {Object} data - Parsed SSE message data
+ * Handle SSE (Server-Sent Events) messages
+ * @param {Object} data - The parsed SSE data
  */
 function handleSSEMessage(data) {
-    console.log('Received SSE message:', data);
-    
-    if (data.status === 'running') {
-        handleRunningStatus(data);
-    } else if (data.status === 'completed') {
-        handleCompletedStatus(data);
-    } else if (data.status === 'error') {
-        handleErrorStatus(data);
-    } else if (data.html) {
-        // Handle direct HTML updates
-        updateExperimentContainer(data.html);
+    console.log('Processing SSE message:', data);
+    
+    switch (data.status) {
+        case 'running':
+            handleRunningStatus(data);
+            break;
+        case 'completed':
+            handleCompletedStatus(data);
+            break;
+        case 'error':
+            handleErrorStatus(data);
+            break;
+        default:
+            console.warn('Unknown status in SSE message:', data.status);
     }
 }
 
 /**
  * Handle running status updates
- * @param {Object} data - SSE message data
+ * @param {Object} data - The SSE data for running status
  */
 function handleRunningStatus(data) {
-    // Update progress bar
-    if (data.progress !== undefined) {
-        updateProgressBar(data.progress, 100);
+    // Update progress bar if progress info is available
+    if (data.current !== undefined && data.total !== undefined) {
+        updateProgressBar(data.current, data.total);
     }
     
-    // Add new messages to log
-    if (data.messages && Array.isArray(data.messages)) {
-        data.messages.forEach(message => {
-            addLogMessage(message, data.log_level || 'info');
-        });
+    // Add log message if available
+    if (data.message) {
+        const level = data.level || 'info';
+        addLogMessage(data.message, level);
     }
 }
 
 /**
  * Handle completed status
- * @param {Object} data - SSE message data
+ * @param {Object} data - The SSE data for completed status
  */
 function handleCompletedStatus(data) {
-    streamClosed = true;
-    
-    // Update progress to 100%
-    updateProgressBar(100, 100);
-    
-    // Add completion message
-    addLogMessage('✅ Experiment completed successfully!', 'info');
+    console.log('Experiment completed successfully');
     
     // Close EventSource connection
     if (eventSource) {
         eventSource.close();
         eventSource = null;
+        streamClosed = true;
         console.log('EventSource connection closed after completion');
     }
     
-    // Show completion HTML if provided
+    // Update progress to 100%
+    updateProgressBar(100, 100);
+    
+    // Add completion message
+    addLogMessage('✅ Experiment completed successfully!', 'info');
+    
+    // Update experiment container with final HTML if provided
     if (data.html) {
-        const experimentContainer = document.getElementById('experiment-container');
-        if (experimentContainer) {
-            // Append the completion message after the existing content
-            const completionDiv = document.createElement('div');
-            completionDiv.innerHTML = data.html;
-            experimentContainer.appendChild(completionDiv);
-        }
+        updateExperimentContainer(data.html);
     }
-    
-    console.log('Experiment completed successfully');
 }
 
 /**
  * Handle error status
- * @param {Object} data - SSE message data
+ * @param {Object} data - The SSE data for error status
  */
 function handleErrorStatus(data) {
-    streamClosed = true;
+    const errorMessage = data.message || 'Unknown error occurred';
+    console.error('Experiment error:', errorMessage);
     
     // Add error message to log
-    const errorMessage = data.error || 'Unknown error occurred';
     addLogMessage(`❌ Error: ${errorMessage}`, 'error');
     
     // Close EventSource connection
@@ -390,6 +393,8 @@ function initializeFormValidation() {
  */
 function initializeConfigurationHandlers() {
     const configSelect = document.getElementById('config_name');
+    const settingsSelect = document.getElementById('settings_name');
+    
     if (configSelect) {
         configSelect.addEventListener('change', function () {
             if (this.value && currentStatsSource) {
@@ -397,80 +402,123 @@ function initializeConfigurationHandlers() {
             }
         });
     }
+    
+    if (settingsSelect) {
+        settingsSelect.addEventListener('change', function () {
+            if (this.value) {
+                loadSettingsYaml(this.value);
+            }
+        });
+    }
 }
 
 /**
  * Check initial configuration state on page load
  */
 function checkInitialConfigState() {
-    const editButton = document.getElementById('edit-config-btn');
-    const customYaml = document.getElementById('config_yaml');
+    const editConfigButton = document.getElementById('edit-config-btn');
+    const editSettingsButton = document.getElementById('edit-settings-btn');
+    const customConfigYaml = document.getElementById('config_yaml');
+    const customSettingsYaml = document.getElementById('settings_yaml');
+    
+    if (editConfigButton && customConfigYaml && customConfigYaml.value && customConfigYaml.value.trim()) {
+        editConfigButton.innerHTML = '<i class="bi bi-pencil-square me-1"></i> Customized';
+        editConfigButton.classList.remove('btn-outline-secondary');
+        editConfigButton.classList.add('btn-outline-warning');
+    }
     
-    if (editButton && customYaml && customYaml.value && customYaml.value.trim()) {
-        editButton.innerHTML = '<i class="bi bi-pencil-square me-1"></i> Customized';
-        editButton.classList.remove('btn-outline-secondary');
-        editButton.classList.add('btn-outline-warning');
+    if (editSettingsButton && customSettingsYaml && customSettingsYaml.value && customSettingsYaml.value.trim()) {
+        editSettingsButton.innerHTML = '<i class="bi bi-pencil-square me-1"></i> Customized';
+        editSettingsButton.classList.remove('btn-outline-secondary');
+        editSettingsButton.classList.add('btn-outline-warning');
     }
 }
 
 /**
- * Load available configurations for a selected statistics source
+ * Load available settings and configurations for a selected statistics source
  * @param {string} statsSource - The selected statistics source identifier
  */
-function loadConfigurations(statsSource) {
+function loadSettingsAndConfigurations(statsSource) {
+    const settingsSelect = document.getElementById('settings_name');
     const configSelect = document.getElementById('config_name');
-    const editButton = document.getElementById('edit-config-btn');
+    const editSettingsButton = document.getElementById('edit-settings-btn');
+    const editConfigButton = document.getElementById('edit-config-btn');
 
     if (!statsSource) {
-        resetConfigurationControls(configSelect, editButton);
+        resetSettingsAndConfigurationControls(settingsSelect, configSelect, editSettingsButton, editConfigButton);
         return;
     }
 
     currentStatsSource = statsSource;
-    showConfigurationLoading(configSelect, editButton);
-
-    // Fetch configurations for the selected stats source
-    fetch(`/experiment/configs/${statsSource}`)
-        .then(response => response.json())
-        .then(data => {
-            if (data.error) {
-                handleConfigurationError(configSelect, data.error);
-                return;
-            }
-
-            if (!data.configs || data.configs.length === 0) {
-                showNoConfigurationsAvailable(configSelect);
-                return;
-            }
+    showSettingsAndConfigurationLoading(settingsSelect, configSelect, editSettingsButton, editConfigButton);
+
+    // Load settings and configurations in parallel
+    Promise.all([
+        fetch('/experiment/settings').then(response => response.json()),
+        fetch(`/experiment/configs/${statsSource}`).then(response => response.json())
+    ])
+    .then(([settingsData, configsData]) => {
+        // Handle settings
+        if (settingsData.error) {
+            handleSettingsError(settingsSelect, settingsData.error);
+        } else if (!settingsData.settings || settingsData.settings.length === 0) {
+            showNoSettingsAvailable(settingsSelect);
+        } else {
+            populateSettingsOptions(settingsSelect, settingsData.settings);
+            enableSettingsControls(settingsSelect, editSettingsButton);
+            loadDefaultSettings(settingsSelect);
+        }
 
-            populateConfigurationOptions(configSelect, data.configs);
-            enableConfigurationControls(configSelect, editButton);
+        // Handle configurations
+        if (configsData.error) {
+            handleConfigurationError(configSelect, configsData.error);
+        } else if (!configsData.configs || configsData.configs.length === 0) {
+            showNoConfigurationsAvailable(configSelect);
+        } else {
+            populateConfigurationOptions(configSelect, configsData.configs);
+            enableConfigurationControls(configSelect, editConfigButton);
             loadDefaultConfiguration(configSelect);
-        })
-        .catch(error => {
-            console.error('Error fetching configurations:', error);
-            handleConfigurationError(configSelect, 'Error loading configurations');
-        });
+        }
+    })
+    .catch(error => {
+        console.error('Error fetching settings and configurations:', error);
+        handleSettingsError(settingsSelect, 'Error loading settings');
+        handleConfigurationError(configSelect, 'Error loading configurations');
+    });
 }
 
 /**
- * Reset configuration controls to initial state
+ * Reset settings and configuration controls to initial state
  */
-function resetConfigurationControls(configSelect, editButton) {
+function resetSettingsAndConfigurationControls(settingsSelect, configSelect, editSettingsButton, editConfigButton) {
+    settingsSelect.disabled = true;
     configSelect.disabled = true;
-    editButton.disabled = true;
+    editSettingsButton.disabled = true;
+    editConfigButton.disabled = true;
+    settingsSelect.innerHTML = '<option value="" disabled selected>Select a statistics source first</option>';
     configSelect.innerHTML = '<option value="" disabled selected>Select a statistics source first</option>';
 }
 
 /**
- * Show loading state for configuration controls
+ * Show loading state for settings and configuration controls
  */
-function showConfigurationLoading(configSelect, editButton) {
+function showSettingsAndConfigurationLoading(settingsSelect, configSelect, editSettingsButton, editConfigButton) {
+    settingsSelect.disabled = true;
     configSelect.disabled = true;
-    editButton.disabled = true;
+    editSettingsButton.disabled = true;
+    editConfigButton.disabled = true;
+    settingsSelect.innerHTML = '<option value="" disabled selected>Loading settings...</option>';
     configSelect.innerHTML = '<option value="" disabled selected>Loading configurations...</option>';
 }
 
+/**
+ * Handle settings loading errors
+ */
+function handleSettingsError(settingsSelect, errorMessage) {
+    settingsSelect.innerHTML = '<option value="" disabled selected>Error loading settings</option>';
+    console.error('Settings loading error:', errorMessage);
+}
+
 /**
  * Handle configuration loading errors
  */
@@ -479,6 +527,13 @@ function handleConfigurationError(configSelect, errorMessage) {
     console.error('Configuration loading error:', errorMessage);
 }
 
+/**
+ * Show message when no settings are available
+ */
+function showNoSettingsAvailable(settingsSelect) {
+    settingsSelect.innerHTML = '<option value="" disabled selected>No settings available</option>';
+}
+
 /**
  * Show message when no configurations are available
  */
@@ -486,6 +541,23 @@ function showNoConfigurationsAvailable(configSelect) {
     configSelect.innerHTML = '<option value="" disabled selected>No configurations available</option>';
 }
 
+/**
+ * Populate settings select with available options
+ */
+function populateSettingsOptions(settingsSelect, settings) {
+    settingsSelect.innerHTML = '<option value="" disabled selected>Select settings</option>';
+    
+    settings.forEach(([key, description]) => {
+        const option = document.createElement('option');
+        option.value = key;
+        option.textContent = description;
+        if (key === 'default') {
+            option.selected = true;
+        }
+        settingsSelect.appendChild(option);
+    });
+}
+
 /**
  * Populate configuration select with available options
  */
@@ -503,12 +575,30 @@ function populateConfigurationOptions(configSelect, configs) {
     });
 }
 
+/**
+ * Enable settings controls after successful loading
+ */
+function enableSettingsControls(settingsSelect, editSettingsButton) {
+    settingsSelect.disabled = false;
+    editSettingsButton.disabled = false;
+}
+
 /**
  * Enable configuration controls after successful loading
  */
-function enableConfigurationControls(configSelect, editButton) {
+function enableConfigurationControls(configSelect, editConfigButton) {
     configSelect.disabled = false;
-    editButton.disabled = false;
+    editConfigButton.disabled = false;
+}
+
+/**
+ * Load default settings if available
+ */
+function loadDefaultSettings(settingsSelect) {
+    if (settingsSelect.value || settingsSelect.querySelector('option[value="default"]')) {
+        const selectedSettings = settingsSelect.value || 'default';
+        loadSettingsYaml(selectedSettings);
+    }
 }
 
 /**
@@ -521,6 +611,31 @@ function loadDefaultConfiguration(configSelect) {
     }
 }
 
+/**
+ * Load YAML settings content for editing
+ * @param {string} settingsName - Settings name
+ */
+function loadSettingsYaml(settingsName) {
+    fetch(`/experiment/settings/${settingsName}/yaml`)
+        .then(response => response.json())
+        .then(data => {
+            if (data.error) {
+                console.error('Error loading settings YAML:', data.error);
+                return;
+            }
+            
+            originalSettingsYaml = data.yaml;
+            // Clear any custom YAML since we're loading a predefined setting
+            document.getElementById('settings_yaml').value = '';
+
+            // Reset edit button state
+            resetEditSettingsButtonState();
+        })
+        .catch(error => {
+            console.error('Error fetching settings YAML:', error);
+        });
+}
+
 /**
  * Load YAML configuration content for editing
  * @param {string} statsSource - Statistics source identifier
@@ -531,32 +646,65 @@ function loadConfigurationYaml(statsSource, configName) {
         .then(response => response.json())
         .then(data => {
             if (data.error) {
-                console.error('Error loading YAML:', data.error);
+                console.error('Error loading config YAML:', data.error);
                 return;
             }
             
-            originalYamlConfig = data.yaml;
+            originalConfigYaml = data.yaml;
             // Clear any custom YAML since we're loading a predefined config
             document.getElementById('config_yaml').value = '';
 
             // Reset edit button state
-            resetEditButtonState();
+            resetEditConfigButtonState();
         })
         .catch(error => {
-            console.error('Error fetching YAML:', error);
+            console.error('Error fetching config YAML:', error);
         });
 }
 
 /**
- * Reset edit button to default state
+ * Reset edit settings button to default state
  */
-function resetEditButtonState() {
+function resetEditSettingsButtonState() {
+    const editButton = document.getElementById('edit-settings-btn');
+    editButton.innerHTML = '<i class="bi bi-pencil-square me-1"></i> Edit';
+    editButton.classList.remove('btn-outline-success', 'btn-outline-warning');
+    editButton.classList.add('btn-outline-secondary');
+}
+
+/**
+ * Reset edit config button to default state
+ */
+function resetEditConfigButtonState() {
     const editButton = document.getElementById('edit-config-btn');
     editButton.innerHTML = '<i class="bi bi-pencil-square me-1"></i> Edit';
     editButton.classList.remove('btn-outline-success', 'btn-outline-warning');
     editButton.classList.add('btn-outline-secondary');
 }
 
+/**
+ * Open the settings editor modal
+ */
+function openSettingsEditor() {
+    const settingsSelect = document.getElementById('settings_name');
+    const selectedSettings = settingsSelect.value;
+
+    if (!selectedSettings) {
+        alert('Please select settings first.');
+        return;
+    }
+
+    // Update modal info
+    updateSettingsModalInfo(selectedSettings);
+    
+    // Load appropriate YAML content
+    loadSettingsYamlIntoEditor();
+    
+    // Show the modal
+    const modal = new bootstrap.Modal(document.getElementById('settingsEditorModal'));
+    modal.show();
+}
+
 /**
  * Open the configuration editor modal
  */
@@ -570,67 +718,146 @@ function openConfigEditor() {
     }
 
     // Update modal info
-    updateModalInfo(selectedConfig);
+    updateConfigModalInfo(selectedConfig);
     
     // Load appropriate YAML content
-    loadYamlIntoEditor();
+    loadConfigYamlIntoEditor();
     
     // Show the modal
     const modal = new bootstrap.Modal(document.getElementById('configEditorModal'));
     modal.show();
 }
 
+/**
+ * Update settings modal information
+ */
+function updateSettingsModalInfo(selectedSettings) {
+    document.getElementById('settings-name').textContent = selectedSettings;
+}
+
 /**
  * Update configuration modal information
  */
-function updateModalInfo(selectedConfig) {
+function updateConfigModalInfo(selectedConfig) {
     document.getElementById('config-source-name').textContent = currentStatsSource;
     document.getElementById('config-original-name').textContent = selectedConfig;
 }
 
 /**
- * Load YAML content into the editor
+ * Load settings YAML content into the editor
+ */
+function loadSettingsYamlIntoEditor() {
+    const customYaml = document.getElementById('settings_yaml').value;
+    
+    if (customYaml && customYaml.trim()) {
+        // Load the previously edited YAML
+        document.getElementById('settings-yaml-editor').value = customYaml;
+        updateSettingsStatus('Modified', 'badge bg-warning');
+    } else {
+        // Load the original YAML
+        document.getElementById('settings-yaml-editor').value = originalSettingsYaml;
+        updateSettingsStatus('Unchanged', 'badge bg-secondary');
+    }
+}
+
+/**
+ * Load config YAML content into the editor
  */
-function loadYamlIntoEditor() {
+function loadConfigYamlIntoEditor() {
     const customYaml = document.getElementById('config_yaml').value;
     
     if (customYaml && customYaml.trim()) {
         // Load the previously edited YAML
-        document.getElementById('yaml-editor').value = customYaml;
+        document.getElementById('config-yaml-editor').value = customYaml;
         updateConfigStatus('Modified', 'badge bg-warning');
     } else {
         // Load the original YAML
-        document.getElementById('yaml-editor').value = originalYamlConfig;
+        document.getElementById('config-yaml-editor').value = originalConfigYaml;
         updateConfigStatus('Unchanged', 'badge bg-secondary');
     }
 }
 
+/**
+ * Update settings status display
+ */
+function updateSettingsStatus(statusText, statusClass) {
+    const statusElement = document.getElementById('settings-status');
+    if (statusElement) {
+        statusElement.textContent = statusText;
+        statusElement.className = statusClass;
+    }
+}
+
 /**
  * Update configuration status display
  */
 function updateConfigStatus(statusText, statusClass) {
     const statusElement = document.getElementById('config-status');
-    statusElement.textContent = statusText;
-    statusElement.className = statusClass;
+    if (statusElement) {
+        statusElement.textContent = statusText;
+        statusElement.className = statusClass;
+    }
+}
+
+/**
+ * Reset settings to original state
+ */
+function resetSettings() {
+    document.getElementById('settings-yaml-editor').value = originalSettingsYaml;
+    updateSettingsStatus('Unchanged', 'badge bg-secondary');
+
+    // Clear the hidden settings_yaml field
+    document.getElementById('settings_yaml').value = '';
+    resetEditSettingsButtonState();
 }
 
 /**
  * Reset configuration to original state
  */
 function resetConfiguration() {
-    document.getElementById('yaml-editor').value = originalYamlConfig;
+    document.getElementById('config-yaml-editor').value = originalConfigYaml;
     updateConfigStatus('Unchanged', 'badge bg-secondary');
 
     // Clear the hidden config_yaml field
     document.getElementById('config_yaml').value = '';
-    resetEditButtonState();
+    resetEditConfigButtonState();
+}
+
+/**
+ * Save settings changes
+ */
+function saveSettings() {
+    const yamlContent = document.getElementById('settings-yaml-editor').value.trim();
+
+    if (!yamlContent) {
+        alert('Settings cannot be empty.');
+        return;
+    }
+
+    // Basic YAML validation
+    if (!validateYamlSettings(yamlContent)) {
+        return;
+    }
+
+    // Check if settings were actually modified
+    const isActuallyModified = yamlContent.trim() !== originalSettingsYaml.trim();
+
+    // Store the edited YAML
+    document.getElementById('settings_yaml').value = yamlContent;
+
+    // Update UI based on modification status
+    updateSettingsUI(isActuallyModified);
+
+    // Close the modal
+    const modal = bootstrap.Modal.getInstance(document.getElementById('settingsEditorModal'));
+    modal.hide();
 }
 
 /**
  * Save configuration changes
  */
 function saveConfiguration() {
-    const yamlContent = document.getElementById('yaml-editor').value.trim();
+    const yamlContent = document.getElementById('config-yaml-editor').value.trim();
 
     if (!yamlContent) {
         alert('Configuration cannot be empty.');
@@ -643,7 +870,7 @@ function saveConfiguration() {
     }
 
     // Check if configuration was actually modified
-    const isActuallyModified = yamlContent.trim() !== originalYamlConfig.trim();
+    const isActuallyModified = yamlContent.trim() !== originalConfigYaml.trim();
 
     // Store the edited YAML
     document.getElementById('config_yaml').value = yamlContent;
@@ -656,14 +883,30 @@ function saveConfiguration() {
     modal.hide();
 }
 
+/**
+ * Validate YAML settings content
+ */
+function validateYamlSettings(yamlContent) {
+    try {
+        // Basic validation - check for required sections
+        if (!yamlContent.includes('name:')) {
+            throw new Error('Settings must include name field');
+        }
+        return true;
+    } catch (error) {
+        alert('Invalid YAML settings: ' + error.message);
+        return false;
+    }
+}
+
 /**
  * Validate YAML configuration content
  */
 function validateYamlConfiguration(yamlContent) {
     try {
         // Basic validation - check for required sections
-        if (!yamlContent.includes('name:') || !yamlContent.includes('settings:')) {
-            throw new Error('Configuration must include name and settings sections');
+        if (!yamlContent.includes('name:')) {
+            throw new Error('Configuration must include name field');
         }
         return true;
     } catch (error) {
@@ -672,6 +915,24 @@ function validateYamlConfiguration(yamlContent) {
     }
 }
 
+/**
+ * Update settings UI based on modification status
+ */
+function updateSettingsUI(isModified) {
+    const editButton = document.getElementById('edit-settings-btn');
+    
+    if (isModified) {
+        updateSettingsStatus('Modified', 'badge bg-warning');
+        editButton.innerHTML = '<i class="bi bi-pencil-square me-1"></i> Customized';
+        editButton.classList.remove('btn-outline-secondary');
+        editButton.classList.add('btn-outline-warning');
+    } else {
+        updateSettingsStatus('Unchanged', 'badge bg-secondary');
+        document.getElementById('settings_yaml').value = '';
+        resetEditSettingsButtonState();
+    }
+}
+
 /**
  * Update configuration UI based on modification status
  */
@@ -686,7 +947,7 @@ function updateConfigurationUI(isModified) {
     } else {
         updateConfigStatus('Unchanged', 'badge bg-secondary');
         document.getElementById('config_yaml').value = '';
-        resetEditButtonState();
+        resetEditConfigButtonState();
     }
 }
 
diff --git a/app/app/templates/_partials/experiment_form.html b/app/app/templates/_partials/experiment_form.html
index e5f951b..9958156 100644
--- a/app/app/templates/_partials/experiment_form.html
+++ b/app/app/templates/_partials/experiment_form.html
@@ -72,15 +72,15 @@ Created: 2024
         </div>
     </div>
     
-    <!-- Statistics Source and Configuration Row -->
+    <!-- Statistics Source Row -->
     <div class="row">
-        <div class="col-md-6 mb-3">
+        <div class="col-md-12 mb-3">
             <label for="stats_source" class="form-label">
                 <i class="bi bi-database me-1"></i>
                 Statistics Source
             </label>
             <select class="form-select" id="stats_source" name="stats_source" required
-                    onchange="loadConfigurations(this.value)">
+                    onchange="loadSettingsAndConfigurations(this.value)">
                 <option value="" disabled selected>Select a statistics source</option>
                 {% for key, name in src %}
                 <option value="{{ key }}">{{ name }}</option>
@@ -88,6 +88,29 @@ Created: 2024
             </select>
             <div class="form-text">Choose the statistics source to use for query planning</div>
         </div>
+    </div>
+    
+    <!-- Settings and Configuration Row -->
+    <div class="row">
+        <div class="col-md-6 mb-3">
+            <label for="settings_name" class="form-label">
+                <i class="bi bi-sliders me-1"></i>
+                Runtime Settings
+            </label>
+            <div class="input-group">
+                <select class="form-select" id="settings_name" name="settings_name" disabled>
+                    <option value="" disabled selected>Select a statistics source first</option>
+                </select>
+                <button type="button" class="btn btn-outline-secondary" id="edit-settings-btn" disabled
+                        onclick="openSettingsEditor()">
+                    <i class="bi bi-pencil-square me-1"></i>
+                    Edit
+                </button>
+            </div>
+            <div class="form-text">Choose runtime settings (timeouts, memory, etc.)</div>
+            <!-- Hidden field to store the edited YAML settings -->
+            <input type="hidden" id="settings_yaml" name="settings_yaml" value="">
+        </div>
         <div class="col-md-6 mb-3">
             <label for="config_name" class="form-label">
                 <i class="bi bi-gear me-1"></i>
@@ -103,7 +126,7 @@ Created: 2024
                     Edit
                 </button>
             </div>
-            <div class="form-text">Choose the configuration for the selected statistics source</div>
+            <div class="form-text">Choose configuration for the selected statistics source</div>
             <!-- Hidden field to store the edited YAML configuration -->
             <input type="hidden" id="config_yaml" name="config_yaml" value="">
         </div>
diff --git a/app/app/templates/experiment.html b/app/app/templates/experiment.html
index f5fe67e..a1e8dc1 100644
--- a/app/app/templates/experiment.html
+++ b/app/app/templates/experiment.html
@@ -83,6 +83,91 @@ Created: 2024 (Refactored from original large template)
 
 </div>
 
+<!-- Settings Editor Modal -->
+<div class="modal fade" id="settingsEditorModal" tabindex="-1" aria-labelledby="settingsEditorModalLabel"
+    aria-hidden="true">
+    <div class="modal-dialog modal-xl">
+        <div class="modal-content">
+            <div class="modal-header">
+                <h5 class="modal-title" id="settingsEditorModalLabel">
+                    <i class="bi bi-sliders me-2"></i>
+                    Settings Editor
+                </h5>
+                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
+            </div>
+            <div class="modal-body">
+                <div class="row">
+                    <div class="col-md-8">
+                        <div class="mb-3">
+                            <label for="settings-yaml-editor" class="form-label">
+                                <i class="bi bi-file-earmark-code me-1"></i>
+                                YAML Settings
+                            </label>
+                            <textarea class="form-control" id="settings-yaml-editor" rows="20"
+                                style="font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;"></textarea>
+                            <div class="form-text">Edit the runtime settings in YAML format</div>
+                        </div>
+                    </div>
+                    <div class="col-md-4">
+                        <div class="card">
+                            <div class="card-header">
+                                <h6 class="mb-0">
+                                    <i class="bi bi-info-circle me-1"></i>
+                                    Settings Info
+                                </h6>
+                            </div>
+                            <div class="card-body">
+                                <div class="mb-2">
+                                    <strong>Settings:</strong> <span id="settings-name">-</span>
+                                </div>
+                                <div class="mb-3">
+                                    <strong>Status:</strong> <span id="settings-status"
+                                        class="badge bg-secondary">Ready</span>
+                                </div>
+                                <div class="alert alert-info">
+                                    <small>
+                                        <i class="bi bi-lightbulb me-1"></i>
+                                        <strong>Tip:</strong> Settings control runtime behavior like timeouts and memory usage.
+                                    </small>
+                                </div>
+                            </div>
+                        </div>
+                        <div class="card mt-3">
+                            <div class="card-header">
+                                <h6 class="mb-0">
+                                    <i class="bi bi-list-check me-1"></i>
+                                    Runtime Settings
+                                </h6>
+                            </div>
+                            <div class="card-body">
+                                <ul class="list-unstyled mb-0 small">
+                                    <li><code>analyze_verbose</code> - Enable verbose analyze output</li>
+                                    <li><code>analyze_timeout_seconds</code> - Timeout for operations</li>
+                                    <li><code>clear_caches</code> - Clear database caches</li>
+                                    <li><code>reset_counters</code> - Reset statistics counters</li>
+                                    <li><code>work_mem</code> - Memory for operations</li>
+                                    <li><code>maintenance_work_mem</code> - Memory for maintenance</li>
+                                </ul>
+                            </div>
+                        </div>
+                    </div>
+                </div>
+            </div>
+            <div class="modal-footer">
+                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
+                <button type="button" class="btn btn-outline-primary" onclick="resetSettings()">
+                    <i class="bi bi-arrow-clockwise me-1"></i>
+                    Reset to Original
+                </button>
+                <button type="button" class="btn btn-primary" onclick="saveSettings()">
+                    <i class="bi bi-check2 me-1"></i>
+                    Save Settings
+                </button>
+            </div>
+        </div>
+    </div>
+</div>
+
 <!-- Configuration Editor Modal -->
 <div class="modal fade" id="configEditorModal" tabindex="-1" aria-labelledby="configEditorModalLabel"
     aria-hidden="true">
@@ -99,13 +184,13 @@ Created: 2024 (Refactored from original large template)
                 <div class="row">
                     <div class="col-md-8">
                         <div class="mb-3">
-                            <label for="yaml-editor" class="form-label">
+                            <label for="config-yaml-editor" class="form-label">
                                 <i class="bi bi-file-earmark-code me-1"></i>
                                 YAML Configuration
                             </label>
-                            <textarea class="form-control" id="yaml-editor" rows="20"
+                            <textarea class="form-control" id="config-yaml-editor" rows="20"
                                 style="font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;"></textarea>
-                            <div class="form-text">Edit the configuration settings in YAML format</div>
+                            <div class="form-text">Edit the configuration data in YAML format</div>
                         </div>
                     </div>
                     <div class="col-md-4">
@@ -130,8 +215,7 @@ Created: 2024 (Refactored from original large template)
                                 <div class="alert alert-info">
                                     <small>
                                         <i class="bi bi-lightbulb me-1"></i>
-                                        <strong>Tip:</strong> Changes will be saved with your experiment and can be
-                                        viewed in the results.
+                                        <strong>Tip:</strong> Configuration data is passed to the statistics source for processing.
                                     </small>
                                 </div>
                             </div>
@@ -140,17 +224,14 @@ Created: 2024 (Refactored from original large template)
                             <div class="card-header">
                                 <h6 class="mb-0">
                                     <i class="bi bi-list-check me-1"></i>
-                                    Common Settings
+                                    Configuration Data
                                 </h6>
                             </div>
                             <div class="card-body">
                                 <ul class="list-unstyled mb-0 small">
-                                    <li><code>analyze_verbose</code> - Enable verbose analyze output</li>
-                                    <li><code>analyze_timeout_seconds</code> - Timeout for operations</li>
-                                    <li><code>clear_caches</code> - Clear database caches</li>
-                                    <li><code>work_mem</code> - Memory for operations</li>
-                                    <li><code>min_stats_value</code> - Min random stats (random only)</li>
-                                    <li><code>max_stats_value</code> - Max random stats (random only)</li>
+                                    <li><code>name</code> - Configuration name</li>
+                                    <li><code>description</code> - Configuration description</li>
+                                    <li><code>message</code> - Data message for stats source</li>
                                 </ul>
                             </div>
                         </div>
